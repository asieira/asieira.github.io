<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>InfoSec Zanshin</title><link href="http://asieira.github.io/" rel="alternate"></link><link href="http://asieira.github.io/feeds/tools.atom.xml" rel="self"></link><id>http://asieira.github.io/</id><updated>2016-02-02T17:40:00-02:00</updated><entry><title>Test Data to Develop Splunk Content</title><link href="http://asieira.github.io/test-data-to-develop-splunk-content.html" rel="alternate"></link><updated>2016-02-02T17:40:00-02:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-02-02:test-data-to-develop-splunk-content.html</id><summary type="html">&lt;p&gt;&lt;a href="http://splunk.com"&gt;Splunk&lt;/a&gt; is the SIEM platform I have been working the most with recently. It is a joy to work with 
because it has embraced the development paradigm, and organizes standard and user-developed content into apps. And it 
lets you write code in proper languages like Python or Java to process the data in ways that go beyond their own query 
language.&lt;/p&gt;
&lt;p&gt;Which brings me to how it is that you can develop and test an app for security devices and environments you don't 
personally have access to. Actual sample log data is not easy to come by, and even when you it some Splunk apps expect
the log data to come from syslog or other input methods, and reading from a file on disk is not always trivial. &lt;/p&gt;
&lt;p&gt;This is a concern both if you are writing a new app that will be used by others, or if you want to ensure that your
internal organization's apps are able to correctly handle log entries that are infrequent or that you might not
have encountered before. For example, the 
&lt;a href="https://docs.splunk.com/Documentation/CIM/latest/User/IntrusionDetection"&gt;Network Intrusion CIM model&lt;/a&gt;
does not specifiy a finite list of possible values for the &lt;code&gt;action&lt;/code&gt; field. And until you see some test examples you
wouldn't have imagined that the Check Point OPSEC TA field extractions will have the service name instead of the port 
number in the &lt;code&gt;dest_port&lt;/code&gt; field of the 
&lt;a href="https://docs.splunk.com/Documentation/CIM/latest/User/NetworkTraffic"&gt;Network Traffic CIM model&lt;/a&gt;. So you'll need to 
get a representative set of events and find what out values your product's TAs actually generate if you want to ensure
your app will adequately survive its first encounter with with real events out there in the wilderness.&lt;/p&gt;
&lt;p&gt;Looking into this for the &lt;a href="https://splunkbase.splunk.com/app/2777/"&gt;Niddel app&lt;/a&gt; I ran into a very useful tool called 
&lt;a href="https://github.com/splunk/eventgen"&gt;eventgen&lt;/a&gt;. Basically what I have found is that most Splunk-developed apps, and
many develop by third parties, are shipped with configuration that allow you to easily generate sample log data that you
can then use to test your content. &lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/splunk/eventgen/blob/develop/README/Tutorial.md"&gt;eventgen tutorial&lt;/a&gt; is very thorough and the
tool is very well documented. However the documentation is almost exclusively focused on app developers which want to
support event generation in their apps. Very little is said about how to simply use the functionality the app developers
already built-in. So let me try to help fill in the gaps here with the TL;DR version, which I only recommend for
development-only Splunk instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, confirm if the particular app or TA you are interested on has that configuration: go to its directory
under &lt;code&gt;$SPLUNK_HOME/etc/apps&lt;/code&gt; (or download it from &lt;a href="https://splunkbase.splunk.com"&gt;SplunkBase&lt;/a&gt; and check within the 
archive) for a &lt;code&gt;samples&lt;/code&gt; directory and a &lt;code&gt;default/eventgen.conf&lt;/code&gt; file. If it's there, you're in luck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, ensure that the apps or TA for which you want to generate events os configured to share their content globally, 
or the eventgen app (installed later) won't be able to access its sample data and configurations. The simplest way to 
do this is on Splunk Web is to navigate to &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Apps&lt;/code&gt; and click on &lt;code&gt;Permissions&lt;/code&gt; under the &lt;code&gt;Sharing&lt;/code&gt; column
for the app you want events from. Make sure the &lt;code&gt;Sharing for config file-only objects&lt;/code&gt; option is set to &lt;code&gt;All apps&lt;/code&gt;: 
&lt;img alt="Splunk app permissions" src="http://asieira.github.io/images/splunk-test-data/app-permissions.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href="https://github.com/splunk/eventgen/"&gt;eventgen GitHub repository&lt;/a&gt; as a 
&lt;a href="https://github.com/splunk/eventgen/archive/develop.zip"&gt;ZIP file&lt;/a&gt; and install it as a Splunk app in &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; 
&lt;code&gt;Manage Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Install app from file&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new eventgen app does not have a setup page when you go to it under &lt;code&gt;Apps&lt;/code&gt;, just statistics on the generated events.
So the only way I found to enable and disable it is to go to &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Apps&lt;/code&gt;and click on &lt;code&gt;Set Up&lt;/code&gt; on the row of the eventgen app. Mark and unmark
the &lt;code&gt;Enable ./bin/eventgen.py&lt;/code&gt; checkbox to enable/disable event generation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One this is done, eventgen will inspect all other installed apps it can access (hence the permissions step above) and
generate fake events for them according to their configurations, usually directly to the &lt;code&gt;main&lt;/code&gt; index. So easy way to
choose which apps to generate events from at this time.&lt;/p&gt;</summary><category term="splunk"></category></entry></feed>