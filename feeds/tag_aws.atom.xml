<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>InfoSec Zanshin - AWS</title><link href="https://asieira.github.io/" rel="alternate"></link><link href="https://asieira.github.io/feeds/tag_aws.atom.xml" rel="self"></link><id>https://asieira.github.io/</id><updated>2017-03-16T09:10:00-03:00</updated><entry><title>Using OpenVPN Access Server to Access AWS VPCs</title><link href="https://asieira.github.io/using-openvpn-access-server-to-access-aws-vpcs.html" rel="alternate"></link><published>2017-03-16T09:10:00-03:00</published><updated>2017-03-16T09:10:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2017-03-16:/using-openvpn-access-server-to-access-aws-vpcs.html</id><summary type="html">&lt;p&gt;Establishing a client-to-site VPN with AWS VPCs using auto-renewing Let's Encrypt certificates&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you use AWS for anything non-trivial, you are likely using 
 &lt;a href="https://aws.amazon.com/documentation/vpc/"&gt;VPCs&lt;/a&gt; and keeping some non-public subnets for 
 resources you don't want to be accessible to the open Internet. &lt;/p&gt;
&lt;p&gt;Usually when this is done, a 
&lt;a href="https://aws.amazon.com/blogs/security/how-to-record-ssh-sessions-established-through-a-bastion-host/"&gt;bastion host&lt;/a&gt; is set up on a VPC public subnet and accessed via 
 SSH to reach those internal instances or resources, through secondary SSH connections or 
 SSH tunnels. That is a good and simple solution that will work well for a simple environment
 with few internal services and few users that need to access it.&lt;/p&gt;
&lt;p&gt;However, I would like to explore an alternative: using
&lt;a href="https://openvpn.net/index.php/access-server/on-amazon-cloud.html"&gt;OpenVPN Access Server&lt;/a&gt; to 
create a client-to-site VPN connection to the VPC. This approach is really easy to implement
and has some pretty interesting benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easy set up of two-factor authentication with 
&lt;a href="https://en.wikipedia.org/wiki/Google_Authenticator"&gt;Google Authenticator&lt;/a&gt; or similar TOTP
solutions. This is something you could also achieve with the bastion host as well using some 
&lt;a href="https://sysconfig.org.uk/two-factor-authentication-with-ssh.html"&gt;PAM magic&lt;/a&gt; if you really 
want to, by the way. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of different IP address ranges to users of different groups, which allows different 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html"&gt;Security Group&lt;/a&gt; 
inbound rules on assets for internal resources based on who the authenticated VPN users are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A web interface for your users that simplifies the task of downloading the VPN client with
the proper connection profile, which is far more manageable for users that are not of a 
strong technical background.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commercial support from the team at 
&lt;a href="https://openvpn.net/index.php/login.html"&gt;OpenVPN&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the downsides is that this solution will require you to buy 
&lt;a href="https://openvpn.net/index.php/access-server/pricing.html"&gt;licenses&lt;/a&gt; for the OpenVPN
Access Server if you plan to have more than two client connections at a time. But I find them
to be reasonably priced.&lt;/p&gt;
&lt;p&gt;For the record, this was documented based on OpenVPN Access Server 2.1.4 and is meant as
a rough but coherent guide to the external references I used to get this working. Hopefully
it will save someone some time.&lt;/p&gt;
&lt;h2&gt;OpenVPN Access Server Instance&lt;/h2&gt;
&lt;p&gt;First, go to the &lt;a href="https://aws.amazon.com/marketplace/"&gt;AWS Marketplace&lt;/a&gt; and find the 
&lt;a href="https://aws.amazon.com/marketplace/pp/B00MI40CAE"&gt;BYOL AMI for OpenVPN Access Server&lt;/a&gt;. Then,
follow their 
&lt;a href="https://docs.openvpn.net/how-to-tutorialsguides/virtual-platforms/amazon-web-services-ec2-tiered-appliance-quick-start-guide/"&gt;Quick Start Guide&lt;/a&gt;
to perform the initial configuration.&lt;/p&gt;
&lt;p&gt;A few things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you install this on a public subnet of your VPC;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the OpenVPN server EC2 instance an 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-eips.html"&gt;elastic IP address&lt;/a&gt;
so that if you stop and restart it the IP address won't change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Updates, Updates and More Updates&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do after you have finished the SSH questions and are logged
into the instance is to fully update it and then reboot it by running the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su -
apt-get update
apt-get dist-upgrade
shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please don't skip the reboot, so that all updates actually take effect, such as updates to the
kernel and to libraries that are currently being used by running processes.&lt;/p&gt;
&lt;h2&gt;Web Server Certificates&lt;/h2&gt;
&lt;p&gt;Now let's set up the OpenVPN Access Server web server so use &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; 
certificates with automated renewal.&lt;/p&gt;
&lt;p&gt;First, as &lt;code&gt;root&lt;/code&gt;, &lt;a href="https://certbot.eff.org/#ubuntuother-other"&gt;install certbot&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /root
wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing the certificates will require issuing custom commands using an OpenVPN Access Server
script, so we'll need to request the certificate &lt;a href="https://certbot.eff.org/docs/using.html#manual"&gt;manually&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Choose a hostname whithin a domain whose DNS records you control. Then, do the following 
as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./certbot-auto certonly --manual --preferred-challenges dns
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Follow the on-screen instructions, and when requested for the domain of the certificate enter 
the hostname you'll use for the OpenVPN server. It will ask you to create a TXT record on
the DNS configuration of the domain so that it validates that you do own the domain. &lt;/p&gt;
&lt;p&gt;If you use Route53 then follow 
&lt;a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-creating.html"&gt;these instructions&lt;/a&gt;
to create the TXT record and you'll end up with something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TXT record" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/TXT_record.png"&gt;&lt;/p&gt;
&lt;p&gt;Take this time to also create an &lt;code&gt;A&lt;/code&gt; record set that maps the hostname of your OpenVPN server to the
Elastic IP address you assigned to it in the previous section.&lt;/p&gt;
&lt;p&gt;Finally, we need to configure OpenVPN Access Server to use these certificates. In order to be ready 
for automated renewal later on, let's do this by creating two scripts that I adapted
from &lt;a href="https://www.sideras.net/lets-encrypt-https-certificates-for-openvpn-as-access-server/"&gt;elsewhere&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; /root/pre-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli stop&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh

cat &amp;gt; /root/post-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.ca_bundle -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/fullchain.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.priv_key -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/privkey.pem`&amp;quot; &amp;gt; /dev/null&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.cert -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/cert.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli start&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please replace &lt;code&gt;openvpn.example.com&lt;/code&gt; in the code above with the actual hostname you chose for your OpenVPN 
server. Then, you immediately run the scripts to load the newly created certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/root/pre-hook.sh
/root/post-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we set up the &lt;a href="https://certbot.eff.org/docs/using.html#renewing-certificates"&gt;automated renewal&lt;/a&gt;, and 
this is where it becomes obvious why we created those scripts.  You create a regular task executed twice a 
day by running &lt;code&gt;crontab -e&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; and entering the following new entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 1,13 * * * /root/certbot-auto renew --pre-hook &amp;quot;/root/pre-hook.sh&amp;quot; --post-hook &amp;quot;/root/post-hook.sh&amp;quot; --quiet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please choose an arbitrary number between 1 and 60 and replace the first &lt;code&gt;0&lt;/code&gt; in the above line. Also choose 
different hours (instead of &lt;code&gt;1,13&lt;/code&gt;) for executing this. If lots of people configure their cron jobs to  hit 
Let's Encrypt at exactly the same times we might end up with an accidental DDoS.&lt;/p&gt;
&lt;p&gt;At this point, you should be able to access the admin interface (by default in our example it would be
&lt;code&gt;https://openvpn.example.com:943/admin&lt;/code&gt;), and not get a warning about an invalid certificate. Just remove the
&lt;code&gt;/admin&lt;/code&gt; from the URL and you'll land on the 
&lt;a href="https://openvpn.net/index.php/access-server/section-faq-openvpn-as/client-configuration.html"&gt;user-focused page&lt;/a&gt; instead, where they can log in to download
the client software binaries and profile configuration, and also scan Google Authenticator QR codes.&lt;/p&gt;
&lt;p&gt;Go into the admin interface and perform the configuration that best suits your needs. We'll discuss two
particularly interesting aspects of the configuration next.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;You may choose to have OpenVPN use routing instead of NAT when it forwards traffic from the connected clients
into the VPC environment. If you do that, you can use its ability to assign different users or groups of users
IP addresses in different ranges. This, in turn, allows you to configure Security Group rules inside the VPC
that will only allow certain users or groups of users to communicate with specific services.&lt;/p&gt;
&lt;p&gt;If you do that, however, keep in mind that you'll need to take some additional steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the IP address ranges you assign VPN clients are &lt;em&gt;outside&lt;/em&gt; the CIDR range for the entire VPC.
So if your VPC has addresses on 172.16.0.0/16, you can't assign any part of that address space to VPN clients
even if there are no VPC subnets currently using them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll need to update your VPC routing configuration. For each CIDR of addresses that can be assigned to VPN 
clients, &lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#AddRemoveRoutes"&gt;add a new route&lt;/a&gt;
with that CIDR as the &lt;code&gt;Destination&lt;/code&gt; and the OpenVPN server instance as the &lt;code&gt;Target&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;Disable the source/destination check&lt;/a&gt; 
on the OpenVPN Access Server instance so that it can "answer for" other ranges of IP address in the AWS network
stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Authenticator&lt;/h2&gt;
&lt;p&gt;If everything else is working at this point, requiring users to have two-factor authentication using
Google Authenticator should be pretty easy by now. First, on the admin interface go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp;
&lt;code&gt;Client Settings&lt;/code&gt; and check the box that says &lt;code&gt;Require that users provide a Google Authenticator one-time 
password for every VPN login&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What it took me a while to figure out was how to enroll users. Basically what you do is create the user
normally in the admin interface in &lt;code&gt;User Management&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;User Permissions&lt;/code&gt;, and assign the user a password.&lt;/p&gt;
&lt;p&gt;Then, the end user must log in to the non-admin web interface (&lt;code&gt;https://openvpn.example.com:943&lt;/code&gt; in our
example), and choose &lt;code&gt;Login&lt;/code&gt; instead of &lt;code&gt;Connect&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="user login" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/user_login.png"&gt;&lt;/p&gt;
&lt;p&gt;In this page, they'll the given the choice to download a connection client or a profile configuration they
can import into an existing client. But they will also be displayed the QR code they'll scan using
Google Authenticator. Once they do that, everything should be good to go.&lt;/p&gt;
&lt;h2&gt;CloudWatch Logs Agent&lt;/h2&gt;
&lt;p&gt;Next let's configure the &lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;
so that the OpenVPN Server logs are centralized and easy to query if necessary, and also protected from any
attackers that might gain access to the server.&lt;/p&gt;
&lt;p&gt;Firstly, a minor adjustment is needed to allow the agent installation to go properly. The provided AWS
installation script checks &lt;code&gt;/etc/issue&lt;/code&gt; to determine which Linux distribution the machine uses. And OpenVPN
Access Server has a custom string in that file. So we'll need to edit it to make sure the first line starts 
with &lt;code&gt;Ubuntu&lt;/code&gt; or else the script will refuse to run.&lt;/p&gt;
&lt;p&gt;I also recommend assigning the machine its proper hostname by issuing the following command as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostname openvpn.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, make sure you edit &lt;code&gt;/etc/hostname&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt; to make sure they also match the the full hostname.&lt;/p&gt;
&lt;p&gt;Finally, you can then execute the 
&lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;official AWS installation instructions&lt;/a&gt;
with the following three recommendations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you include &lt;code&gt;/var/log/openvpnas.log&lt;/code&gt;, &lt;code&gt;/var/log/syslog&lt;/code&gt; and &lt;code&gt;/var/log/auth.log&lt;/code&gt; to the log
collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked what the log stream name should be, I recommend you use the newly-configured machine name
for clarity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked about the timestamp format, choose to use a custom format and enter &lt;code&gt;%Y-%m-%dT%H:%M:%S%z&lt;/code&gt;.
Go ISO 8601 or go home.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, you'll need to enable the service to run via systemd (as &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; awslogs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see the new log groups on the AWS Console.&lt;/p&gt;
&lt;p&gt;I would also like to suggest that you create a new file &lt;code&gt;/etc/logrotate.d/openvpnas&lt;/code&gt; with the following
content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/var/log/apt/openvpnas.log {
  rotate 90
  daily
  compress
  missingok
  notifempty
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Additional Recommendations&lt;/h2&gt;
&lt;p&gt;A few security-minded tips that I would recommend you implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure you close off SSH access to the OpenVPN box after you're done configuring it, by removing the
applicable Security Group inbound rule. If you need in you can always do that through the VPN access
itself later on. And if you lock yourself out, you can always allow it temporarily again on the Security
Group if and when you need it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;SSL Settings&lt;/code&gt; and select &lt;code&gt;TLS 1.1&lt;/code&gt; as the minimum 
for both the web server and OpenVPN server, as per 
&lt;a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols"&gt;industry best practice&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;Advanced VPN Settings&lt;/code&gt;. Under 
&lt;code&gt;Additional OpenVPN Config Directives (Advanced)&lt;/code&gt;, replace &lt;code&gt;AES-128-CBC&lt;/code&gt; with &lt;code&gt;AES-256-CBC&lt;/code&gt; in both the
 client and server configuration directives for increased encryption security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harden the operating system and make sure to keep install security updates as they become available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AWS"></category></entry></feed>