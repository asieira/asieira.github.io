<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>InfoSec Zanshin - aws</title><link href="https://asieira.github.io/" rel="alternate"></link><link href="https://asieira.github.io/feeds/tag_aws.atom.xml" rel="self"></link><id>https://asieira.github.io/</id><updated>2019-06-30T12:18:00-03:00</updated><entry><title>Highlights from AWS re:Inforce 2019</title><link href="https://asieira.github.io/highlights-from-aws-reinforce-2019.html" rel="alternate"></link><published>2019-06-30T12:18:00-03:00</published><updated>2019-06-30T12:18:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2019-06-30:/highlights-from-aws-reinforce-2019.html</id><summary type="html">&lt;p&gt;A not at all impartial view of AWS' first security-only event&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I had the pleasure of attending the first ever edition of &lt;a href="https://reinforce.awsevents.com/"&gt;AWS re:Inforce&lt;/a&gt;. In this post I'll try to summarize my impressions of the event, plus include comments and references to the main points of attention and associated documentation and related session videos.&lt;/p&gt;
&lt;h2&gt;The Big News&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-vpc-traffic-mirroring/"&gt;VPC Traffic Mirroring&lt;/a&gt;, was, in my opinion, the most market-relevant announcement at the conference. &lt;/p&gt;
&lt;p&gt;This holds the promise of allowing several security product categories to be first-class citizens in AWS for the first time. After all, AWS has full control into what integration points they allow for traditional security vendors. They are slowly adding integration points, from early days as firewalls using Marketplace AMIs to act as NAT instances to something more explicit like &lt;a href="https://aws.amazon.com/marketplace/solutions/security/waf-managed-rules"&gt;WAF Managed Rules&lt;/a&gt;. Though not explicitly associated with partners, this is still a big deal for many of them.&lt;/p&gt;
&lt;p&gt;Impacted product categories include Network Detection and Response, Network IDS, Network DLP and Network Forensics players. There have been a few announcements of support from vendors already, and be sure to expect more.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="en" dir="ltr"&gt;Oh, I was wondering what all those network traffic analysis vendors were saying there were about to announce regarding AWS ;-)&lt;/p&gt;&amp;mdash; Augusto Barros (@apbarros) &lt;a href="https://twitter.com/apbarros/status/1143547645648134146?ref_src=twsrc%5Etfw"&gt;June 25, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;As far as the customer base goes, this will mostly benefit mixed environment companies. Imagine you are a large, mature organization that has a large Bro / Zeek deployment, trained personnel and lots of bespoke analytics content built on top of it. Being able to extend it to your AWS environment and leverage your existing investments is a no-brainer. I fully expect that the main driver behind AWS developing this functionality was from large representative customers in this situation.&lt;/p&gt;
&lt;p&gt;As usual this is a first release and will be surely improved upon by AWS. Major caveats I noticed so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Despite the name, collection must be set up one &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html"&gt;ENI&lt;/a&gt; at a time. No way to set this up across the entire VPC as you would with &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html"&gt;Flow Logs&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The replicated traffic generated by each instance will count against the overall bandwidth available to the instance, so do your capacity planning before deploying this in production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Noteworthy Announcements&lt;/h2&gt;
&lt;p&gt;Out of the other many new features and announcements, these were the ones that caught my attention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/06/aws-security-hub-now-generally-available/"&gt;Security Hub is now GA&lt;/a&gt;. Security Hub's main advantage is providing a single dashboard, event format and 3rd party integration point for your AWS security, including native services like &lt;a href="https://aws.amazon.com/macie/"&gt;Macie&lt;/a&gt; and &lt;a href="https://aws.amazon.com/guardduty/"&gt;Guard Duty&lt;/a&gt;. The main limitation at this point is that even though it has cross-account support, it is a per-region service. So large organizations will still have multiple "panes of glass". Hope to see AWS work on that in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kD6JdUAKdV8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/06/aws-control-tower-is-now-generally-available/"&gt;Control Tower is now GA&lt;/a&gt;. Essentially AWS is taking the lessons learned from &lt;a href="https://aws.amazon.com/solutions/aws-landing-zone/"&gt;Landing Zone&lt;/a&gt;, which is a professional-services-only offer, and working towards allowing self-service automation of multi-account management as a native service. At this point it still is very much an MVP with several limitations, but should soon evolve into something invaluable so pay attention to future announcements from this team. Some of the key current limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Will only work on new environments and has no way to incorporate an existing &lt;a href="https://aws.amazon.com/organizations/"&gt;Organizations&lt;/a&gt; hierarchy;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does not allow you to create your own service control policies or "guard rails" as they call them in Control Tower lingo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does not allow you to customize provided guard rails except for per-account On/Off status;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does not have its own API, seems at this point to be basically a UI layer on top of existing services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2t-VkWt0rKk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-opt-in-to-default-encryption-for-new-ebs-volumes/"&gt;Opt-in to Default Encryption for EBS Volumes&lt;/a&gt; which should make meeting compliance requirements by default a lot easier on larger organizations. Does not handle existing unencrypted EBS volumes, but then again it's simple enough to find those with &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/encrypted-volumes.html"&gt;Config&lt;/a&gt;. This is a per-region setting, but can be automated through API calls. And most importantly, it only seems to work with &lt;a href="https://aws.amazon.com/blogs/aws/amazon-ec2-update-additional-instance-types-nitro-system-and-cpu-options/"&gt;Nitro&lt;/a&gt; instances:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;The EBS default encryption feature for AWS uses Nitro, which means instance types that don&amp;#39;t support Nitro can no longer be launched once you enable that feature. As a side-effect, I think this means this would enforce the VPC transit encryption for your EC2s.&lt;/p&gt;&amp;mdash; Scott Piper (@0xdabbad00) &lt;a href="https://twitter.com/0xdabbad00/status/1145392090806755328?ref_src=twsrc%5Etfw"&gt;30 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Keynote Highlights&lt;/h2&gt;
&lt;p&gt;During the &lt;a href="https://reinforce.awsevents.com/learn/keynote/"&gt;keynote&lt;/a&gt;, Stephen E. Schmidt (AWS VP and CISO) was the ranking executive and led the announcements. By the way don't miss out on the hilarious Corey Quinn's &lt;a href="https://twitter.com/QuinnyPig/status/1143504072621867009"&gt;live-tweet thread&lt;/a&gt;, and you can also take a look at non-threaded posts from &lt;a href="https://twitter.com/fsmontenegro/status/1143508566499909637"&gt;Fernando Montenegro&lt;/a&gt; and  &lt;a href="https://twitter.com/AlexandreSieira/status/1143514790733725700"&gt;I&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the keynote two moments caught my attention. The first was when Schmidt jabbed Azure and other competitors for the &lt;a href="https://www.datacenterknowledge.com/microsoft/azure-outage-proves-hard-way-availability-zones-are-good-idea"&gt;comparatively bad track record on availability and regional redundancy&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;AWS throwing shade at competitors on region vs. availability zones &lt;a href="https://twitter.com/hashtag/reInforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reInforce&lt;/a&gt; &lt;a href="https://t.co/sg36GRjeXC"&gt;pic.twitter.com/sg36GRjeXC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Sieira (@AlexandreSieira) &lt;a href="https://twitter.com/AlexandreSieira/status/1143515510589546496?ref_src=twsrc%5Etfw"&gt;25 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;The other one was having a representative from &lt;a href="https://en.wikipedia.org/wiki/Capital_One"&gt;Capital One&lt;/a&gt; go on stage to claim they will be entirely cloud-based by 2020. This is a major indication (if you still needed any) of the penetration that cloud adoption is having even on compliance-heavy industries. &lt;/p&gt;
&lt;h2&gt;Venue and Overall Impressions&lt;/h2&gt;
&lt;p&gt;The event was held at the &lt;a href="https://www.signatureboston.com/bcec/getting-here"&gt;Boston Convention and Exhibition Center&lt;/a&gt; on June 25&lt;sup&gt;th&lt;/sup&gt; and 26&lt;sup&gt;th&lt;/sup&gt;. This was my first contact with this venue, but I found it perfectly accommodated an event of this size. I did, however, find a telling lack of available lodging with some astronomical hotel rates and a severe shortage of close-by AirBnb offers even registering about one month in advance.&lt;/p&gt;
&lt;p&gt;Overall, I fully support AWS' wonderful idea to start separate focused conferences. I attended &lt;a href="https://reinvent.awsevents.com/"&gt;re:Invent&lt;/a&gt; last year in Las Vegas and it was quite simply too big to be enjoyable. I had a much better time at &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt; and was pleasantly surprised to actually make it to a few sessions as a walk-in without needing to queue a full hour in advance.&lt;/p&gt;
&lt;p&gt;The show floor had a decent size, but a portion of the size of a single of the original rooms of the RSA Conference Expo in Moscone West or East. Still, it was a single large room containing both the sponsor booths and the AWS Developer Lounges, CTF, Breakout Session spaces and tables used for lunch, a break from it all or impromptu meetings. Again a very pleasant, spacious experience.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;Sponsors getting ready for &lt;a href="https://twitter.com/hashtag/reinforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reinforce&lt;/a&gt; &lt;a href="https://t.co/oHns6yRvm8"&gt;pic.twitter.com/oHns6yRvm8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andres Riancho ☁️ (@AndresRiancho) &lt;a href="https://twitter.com/AndresRiancho/status/1143220457883230208?ref_src=twsrc%5Etfw"&gt;24 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;There were areas with supported charities, plus a couple of really nice touches I wish more conference organizers learn from. First, swag donation collectors:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;This is great. Would love to see similar at all conferences. &lt;a href="https://twitter.com/hashtag/reInforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reInforce&lt;/a&gt; &lt;a href="https://t.co/3Y8iJmiN4T"&gt;pic.twitter.com/3Y8iJmiN4T&lt;/a&gt;&lt;/p&gt;&amp;mdash; Chris Eng (@chriseng) &lt;a href="https://twitter.com/chriseng/status/1143896366592274434?ref_src=twsrc%5Etfw"&gt;26 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;And this is a good way to make the conference more inclusive:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;It’s great to see conferences doing this. This is a legit huge room with chairs and lights and carpet and everything you’d expect, not some random closet. &lt;a href="https://twitter.com/hashtag/ReInvent?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ReInvent&lt;/a&gt; &lt;a href="https://t.co/5sjd96ozdl"&gt;pic.twitter.com/5sjd96ozdl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Richard H. Boyd 🔬🎉 @ re:covery (@rchrdbyd) &lt;a href="https://twitter.com/rchrdbyd/status/1143879178707714049?ref_src=twsrc%5Etfw"&gt;26 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;In summary, my overall impression is that this was absolutely worth the time and money and I fully intend to attend &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt; again next year.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Here are a few other resources if you want to learn more about what went on at &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLmbt_7-buHq-sx_JFNMsbkI5qHb0gWtfZ"&gt;Youtube playlist with all the recorded sessions&lt;/a&gt; by AWS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/security/reinforce-2019-wrap-up-and-session-links/"&gt;Re:Inforce 2019 wrap-up and session links&lt;/a&gt; by AWS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@ashishrajan/aws-re-inforce-boston-2019-aws-security-conference-recap-what-they-didnt-tell-you-on-stage-9b7ecc04ddfe"&gt;AWS Re:inforce Boston 2019— AWS Security Conference: Recap (What they didn’t tell you on stage)&lt;/a&gt; by &lt;a href="https://medium.com/@ashishrajan"&gt;Ashish Rajan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you to &lt;a href="https://twitter.com/dseverski"&gt;David Severski&lt;/a&gt; for helping review an early draft of this document and providing valuable feedback.&lt;/p&gt;</content><category term="aws"></category><category term="cloud"></category><category term="event"></category><category term="reInforce"></category></entry><entry><title>Connecting AWS VPCs with StrongSwan</title><link href="https://asieira.github.io/connecting-aws-vpcs-with-strongswan.html" rel="alternate"></link><published>2017-03-30T18:06:00-03:00</published><updated>2017-03-30T18:06:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2017-03-30:/connecting-aws-vpcs-with-strongswan.html</id><summary type="html">&lt;p&gt;Establishing a site-to-site IPsec VPN between VPCs in different regions on a budget&lt;/p&gt;</summary><content type="html">&lt;p&gt;On my &lt;a href="/using-openvpn-access-server-to-access-aws-vpcs.html"&gt;previous post&lt;/a&gt;
I covered how to allow client-to-site connectivity to an AWS 
&lt;a href="https://aws.amazon.com/documentation/vpc/"&gt;VPC&lt;/a&gt; environment.&lt;/p&gt;
&lt;p&gt;On this post I decided to continue exploring AWS VPC connectivity and talk about how to
connect VPCs. If you have VPCs on the same region, you could simply use
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-peering.html"&gt;VPC peering&lt;/a&gt; and
be done with it. But if your VPCs are located in different regions, you'll need to explore
your &lt;a href="https://aws.amazon.com/answers/networking/aws-multiple-region-multi-vpc-connectivity/"&gt;options&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to test and document one of the more inexpensive and simple options I could think of, 
full mesh connectivity between VPCs using IPsec site-to-site tunnels. And the &lt;em&gt;inexpensive&lt;/em&gt; part 
is taken care of by using &lt;a href="http://www.stronswan.org"&gt;StrongSwan&lt;/a&gt; 5.4.0 on 
&lt;a href="https://www.centos.org"&gt;CentOS&lt;/a&gt; 7 to implement this.&lt;/p&gt;
&lt;p&gt;Basically the scenario here is that I want to connect two VPCs on different regions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;us-east-1 VPC with IP addresses in 172.16.0.0/16;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;us-east-2 VPC with IP addresses in 172.31.0.0/16.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is a simple exercise to extrapolate this configuration to have additional VPCs connected
to these two via full mesh, so I won't get into the specifics of this here. Consider that
as homework.&lt;/p&gt;
&lt;h2&gt;IP Addresses and Security Groups&lt;/h2&gt;
&lt;p&gt;First, create one &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"&gt;Elastic IP Address&lt;/a&gt; 
for each StrongSwan instance. Optionally, create a hostname for each in Route53 if you
think that will help you later on.&lt;/p&gt;
&lt;p&gt;Then, create one 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html"&gt;security group&lt;/a&gt;
for each of the StrongSwan instances. Leave all outbound traffic as allowed, and create the 
following inbound rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create an SSH rule to allow you to log into the box later on;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow &lt;code&gt;All traffic&lt;/code&gt; from all of the VPC IP address ranges. In our example, this means 
allowing all traffic from 172.16.0.0/16 and 172.31.0.0/16 on the security group. This is 
necessary because when an instance acts a router, you can't differentiate traffic directed
to its own IP address or to one of the remote networks it can route to on the security group.
Any such differentiation will unfortunately need to be implemented internally in 
&lt;a href="https://wiki.centos.org/HowTos/Network/IPTables"&gt;iptables&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each of the other elastic IP addresses of StrongSwan instances it will need to 
connect to, create the following rules:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Port Range&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Time Exceeded&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Destination Unreachable&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Echo Reply&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Echo Request&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Traceroute&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom Protocol&lt;/td&gt;
&lt;td&gt;AH (51)&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom UDP Rule&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;4500&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom UDP Rule&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The ICMP rules above serve two purposes. Firstly, the traceroute and echo reply/request ones will 
make it easier for you to troubleshoot the connectivity between the StrongSwan instances. Most 
importantly, though, the time exceeded and destination unreachable entries are there to allow 
&lt;a href="https://en.wikipedia.org/wiki/Path_MTU_Discovery"&gt;path MTU discovery&lt;/a&gt; to happen properly between
StrongSwan instances communicating over the Internet.&lt;/p&gt;
&lt;p&gt;Next, update all of existing security groups in each VPC to ensure these same ICMP messages are 
accepted from all VPCs IP address ranges (172.16.0.0/16 and 172.31.0.0/16 in our example). The 
objective here is similar: to allow troubleshooting and proper path MTU discovery to happen on 
the end-to-end communications between machines on different VPCs through the VPN.&lt;/p&gt;
&lt;h2&gt;Create StrongSwan Instances and Configure Linux&lt;/h2&gt;
&lt;p&gt;This is what you need to keep in mind when creating the instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick the instance type you'll need. Something on the &lt;a href="https://aws.amazon.com/ec2/instance-types/#c4"&gt;c4 family&lt;/a&gt;
 for more heavy-duty traffic volumes, or something on the &lt;a href="https://aws.amazon.com/ec2/instance-types/#t2"&gt;t2&lt;/a&gt; 
 family should be more than enough for sporadic management / admin traffic;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the latest &lt;a href="https://aws.amazon.com/marketplace/pp/B00O7WM7QW/"&gt;CentOS 7 AMI&lt;/a&gt; to create a
 new instance on a public subnet of the chosen region with the security group we recently created;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-eips.html#WorkWithEIPs"&gt;Associate&lt;/a&gt; 
 the elastic IP address to the instance;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;Disable the source/destination check&lt;/a&gt;
 on the instance since it will act as a router.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, SSH into the machine (keep in mind the default username for the AMI is &lt;code&gt;centos&lt;/code&gt;) so
 we can configure the operating system properly. Make sure you become root for the following
 configuration steps.&lt;/p&gt;
&lt;p&gt;Ensure that &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; contains the following lines and then force them to be loaded by
running &lt;code&gt;sysctl -p /etc/sysctl.conf&lt;/code&gt; or by rebooting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.send_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.send_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.tcp_max_syn_backlog &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1280&lt;/span&gt;
net.ipv4.icmp_echo_ignore_broadcasts &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.accept_source_route &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.accept_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.secure_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.log_martians &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.default.accept_source_route &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.accept_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.secure_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.icmp_echo_ignore_broadcasts &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.icmp_ignore_bogus_error_responses &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.tcp_syncookies &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.rp_filter &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.default.rp_filter &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.tcp_mtu_probing &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a side note, it is strongly recommended that you include &lt;code&gt;net.ipv4.tcp_mtu_probing = 1&lt;/code&gt; on the 
&lt;code&gt;sysctl.conf&lt;/code&gt; of all of your Linux EC2 instances, since they use jumbo frames by default.&lt;/p&gt;
&lt;p&gt;Let's make sure the machine is fully patched, that we can use EPEL and that we install StrongSwan
by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install epel-release
yum repolist
yum update
yum install strongswan
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; strongswan
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to ensure the cryptography and logging work properly, the system needs to have proper time
synchronization. Make sure &lt;a href="https://en.wikipedia.org/wiki/Network_Time_Protocol"&gt;NTP&lt;/a&gt; is installed and 
configured to run on system start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install ntp
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; ntpd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the &lt;code&gt;server&lt;/code&gt; configuration entries in &lt;code&gt;/etc/ntp.conf&lt;/code&gt; so the AWS recommended NTP 
server pool is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="m"&gt;0&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;1&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;2&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;3&lt;/span&gt;.amazon.pool.ntp.org iburst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, restart the NTP service with &lt;code&gt;systemctl restart ntpd&lt;/code&gt; and check that it is working properly 
with &lt;code&gt;ntpq -p&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Configuring StrongSwan&lt;/h2&gt;
&lt;p&gt;We'll configure StrongSwan to use RSA keys for authentication, so the first step is to create
those keys and associate them with the servers in the StrongSwan configuration.&lt;/p&gt;
&lt;p&gt;On each StrongSwan instance, create its own RSA key. This is how you would do it on the us-east-1
StrongSwan instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/strongswan/ipsec.d/private/
openssl genrsa -out us-east-1.key &lt;span class="m"&gt;4096&lt;/span&gt;
chmod og-r us-east-1.key
openssl rsa -in us-east-1.key -pubout &amp;gt; ../certs/us-east-1.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you do that, you need to edit &lt;code&gt;/etc/strongswan/ipsec.secrets&lt;/code&gt; to let StrongSwan know what to
do with the private key. Add a line to that file that associates each instance's own elastic IP address
to the key file. Assuming the elastic IP address of the us-east-1 StrongSwan instance is &lt;code&gt;1.2.3.4&lt;/code&gt;,
this is what that line would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4 : RSA us-east-1.key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, you copy each StrongSwan instance's &lt;code&gt;.pub&lt;/code&gt; file to the &lt;code&gt;/etc/strongswan/ipsec.d/certs&lt;/code&gt; 
directory of each of the other StrongSwan instances. In our example, if you were on the us-east-1 
instance you would see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find /etc/strongswan/ipsec.d/ -name *.key
/etc/strongswan/ipsec.d/private/us-east-1.key
$ find /etc/strongswan/ipsec.d/ -name *.pub
/etc/strongswan/ipsec.d/certs/us-east-1.pub
/etc/strongswan/ipsec.d/certs/us-east-2.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you configure &lt;code&gt;/etc/strongswan/ipsec.conf&lt;/code&gt; to tie it all together. This is what the
configuration file would look like the the elastic IP for the us-east-1 and us-east-2 instances
were 1.2.3.4 and 2.3.4.5, respectively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;config setup
    &lt;span class="c1"&gt;# strictcrlpolicy=yes&lt;/span&gt;
    &lt;span class="c1"&gt;# uniqueids = no&lt;/span&gt;

conn %default
    &lt;span class="nv"&gt;fragmentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;force
    &lt;span class="nv"&gt;dpdaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart
    &lt;span class="nv"&gt;ike&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-prfsha256-ecp256-ecp521,aes192-sha256-modp3072
    &lt;span class="nv"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-ecp256,aes192-sha256-modp3072#
    &lt;span class="nv"&gt;keyingtries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%forever
    &lt;span class="nv"&gt;keyexchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ikev2
    &lt;span class="nv"&gt;authby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsasig
    &lt;span class="nv"&gt;forceencaps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;leftid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
    &lt;span class="nv"&gt;leftrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1.pub
    &lt;span class="nv"&gt;leftsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/16

&lt;span class="c1"&gt;# Add connections here.&lt;/span&gt;
conn us-east-2
    &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.3.4.5
    &lt;span class="nv"&gt;rightsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.0.0/16
    &lt;span class="nv"&gt;rightrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-2.pub
    &lt;span class="nv"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Keep in mind that &lt;code&gt;left&lt;/code&gt; in StrongSwan parlance means the side of the VPN that is local to 
the instance you are configuring, and &lt;code&gt;right&lt;/code&gt; is the remote side. So the configuration file on
the us-east-2 instance would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;config setup
    &lt;span class="c1"&gt;# strictcrlpolicy=yes&lt;/span&gt;
    &lt;span class="c1"&gt;# uniqueids = no&lt;/span&gt;

conn %default
    &lt;span class="nv"&gt;fragmentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;dpdaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart
    &lt;span class="nv"&gt;ike&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-prfsha256-ecp256-ecp521,aes192-sha256-modp3072
    &lt;span class="nv"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-ecp256,aes192-sha256-modp3072#
    &lt;span class="nv"&gt;keyingtries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%forever
    &lt;span class="nv"&gt;keyexchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ikev2
    &lt;span class="nv"&gt;authby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsasig
    &lt;span class="nv"&gt;forceencaps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;leftid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.3.4.5
    &lt;span class="nv"&gt;leftrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-2.pub
    &lt;span class="nv"&gt;leftsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.0.0/16

&lt;span class="c1"&gt;# Add connections here.&lt;/span&gt;
conn us-east-1
    &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
    &lt;span class="nv"&gt;rightsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/16
    &lt;span class="nv"&gt;rightrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1.pub
    &lt;span class="nv"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please review the StrongSwan 
&lt;a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf"&gt;documentation on ipsec.conf&lt;/a&gt; to
better understand some of the choices I've made there, and tweak the setup to meet your needs.
I wouldn't change the configuration on the &lt;code&gt;fragmentation&lt;/code&gt; and &lt;code&gt;forceencaps&lt;/code&gt; options, though, 
since I had problems if they were not set as above.&lt;/p&gt;
&lt;p&gt;Once you've set all of this up, run &lt;code&gt;systemctl restart strongswan&lt;/code&gt; and monitor the logs with
&lt;code&gt;tail -f /var/log/messages | grep charon&lt;/code&gt; for log entries related to the IPsec tunnel 
negotiations and authentication.&lt;/p&gt;
&lt;p&gt;Hopefully by now you will be able to ping us-east-2's StrongSwan instance internal (172.31.0.x) 
IP address from the SSH session on us-east-1's StrongSwan instance.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;Finally, in order to allow machines on one region to talk to machines and services on the other,
we'll need to update the 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html"&gt;route tables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What you need to do is to 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#AddRemoveRoutes"&gt;add a new route&lt;/a&gt;
that tells machines on a region that in order to talk to the addresses on the other regions, they 
must go through the StrongSwan instance. &lt;/p&gt;
&lt;p&gt;So in our example, you should add a new route to all routing tables in us-east-1 that has a &lt;code&gt;Destination&lt;/code&gt;
of 172.31.0.0/16, and a &lt;code&gt;Target&lt;/code&gt; that is the instance ID of the us-east-1 StrongSwan instance.&lt;/p&gt;
&lt;p&gt;Conversely, you should add a new route to all routing tables in us-east-2 that has a &lt;code&gt;Destination&lt;/code&gt; of
172.16.0.0/16, and a &lt;code&gt;Target&lt;/code&gt; that is the instance ID of the us-east-2 StrongSwan instance.&lt;/p&gt;
&lt;p&gt;Finally, make sure that the security groups of services that need to be accessed across the VPN
will now allow the IP addresses of the remote machines in. Once you do that, you can then test the
communication between regions successfully. Of course, if you enabled ICMP as recommended above,
you should be able to ping any instance in us-east-2 from any instance in us-east-1 and vice-versa
by now.&lt;/p&gt;
&lt;h2&gt;Availability Concerns&lt;/h2&gt;
&lt;p&gt;You could achieve some level of redundancy and distribution of load by increasing the number
of VPN concentrator instances you stand up. &lt;/p&gt;
&lt;p&gt;One idea would be to create one VPN concentrator per availability zone instead of just one per
region. In this scenario even if one availability zone (or its StrongSwan instance) become
unavailable, the rest of the availability zones will remain connected.&lt;/p&gt;
&lt;p&gt;This is a high level guide of what that would entail in addition to what was discussed
above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the additional StrongSwan instances as per the instructions above;&lt;/li&gt;
&lt;li&gt;Separate the routing tables per availability zone and assign each one to its corresponding 
subnets;&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;ipsec.conf&lt;/code&gt; on all machines to have one connection for each VPN concentrator. Also
update each one's &lt;code&gt;leftsubnet&lt;/code&gt; and &lt;code&gt;rightsubnet&lt;/code&gt; definitions so that each server is only 
responsible for the IP address ranges of the subnets in its availability zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have not covered implementing HA on StrongSwan, though apparently that is 
&lt;a href="https://wiki.strongswan.org/projects/strongswan/wiki/HighAvailability"&gt;supported&lt;/a&gt; as well.
If you get this working let me know.&lt;/p&gt;
&lt;h2&gt;Additional Recommendations&lt;/h2&gt;
&lt;p&gt;A few security-minded tips that I would recommend you implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure you close off SSH access to the StrongSwan instances after you're done configuring them, 
by removing the applicable Security Group inbound rule. You can always allow it temporarily again 
on the Security Group if and when you need it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the
&lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;
on the machine, remember we covered this already 
&lt;a href="/using-openvpn-access-server-to-access-aws-vpcs.html"&gt;here&lt;/a&gt;. Make sure you collect at least the
following files: &lt;code&gt;/var/log/messages&lt;/code&gt;, &lt;code&gt;/var/log/secure&lt;/code&gt; and &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harden the operating system and make sure to keep install security updates as they become available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AWS"></category><category term="Linux"></category><category term="StrongSwan"></category></entry><entry><title>Using OpenVPN Access Server to Access AWS VPCs</title><link href="https://asieira.github.io/using-openvpn-access-server-to-access-aws-vpcs.html" rel="alternate"></link><published>2017-03-16T09:10:00-03:00</published><updated>2017-03-16T09:10:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2017-03-16:/using-openvpn-access-server-to-access-aws-vpcs.html</id><summary type="html">&lt;p&gt;Establishing a client-to-site VPN with AWS VPCs using auto-renewing Let's Encrypt certificates&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you use AWS for anything non-trivial, you are likely using 
 &lt;a href="https://aws.amazon.com/documentation/vpc/"&gt;VPCs&lt;/a&gt; and keeping some non-public subnets for 
 resources you don't want to be accessible to the open Internet. &lt;/p&gt;
&lt;p&gt;Usually when this is done, a 
&lt;a href="https://aws.amazon.com/blogs/security/how-to-record-ssh-sessions-established-through-a-bastion-host/"&gt;bastion host&lt;/a&gt; is set up on a VPC public subnet and accessed via 
 SSH to reach those internal instances or resources, through secondary SSH connections or 
 SSH tunnels. That is a good and simple solution that will work well for a simple environment
 with few internal services and few users that need to access it.&lt;/p&gt;
&lt;p&gt;However, I would like to explore an alternative: using
&lt;a href="https://openvpn.net/index.php/access-server/on-amazon-cloud.html"&gt;OpenVPN Access Server&lt;/a&gt; to 
create a client-to-site VPN connection to the VPC. This approach is really easy to implement
and has some pretty interesting benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easy set up of two-factor authentication with 
&lt;a href="https://en.wikipedia.org/wiki/Google_Authenticator"&gt;Google Authenticator&lt;/a&gt; or similar TOTP
solutions. This is something you could also achieve with the bastion host as well using some 
&lt;a href="https://sysconfig.org.uk/two-factor-authentication-with-ssh.html"&gt;PAM magic&lt;/a&gt; if you really 
want to, by the way. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of different IP address ranges to users of different groups, which allows different 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html"&gt;Security Group&lt;/a&gt; 
inbound rules on assets for internal resources based on who the authenticated VPN users are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A web interface for your users that simplifies the task of downloading the VPN client with
the proper connection profile, which is far more manageable for users that are not of a 
strong technical background.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commercial support from the team at 
&lt;a href="https://openvpn.net/index.php/login.html"&gt;OpenVPN&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the downsides is that this solution will require you to buy 
&lt;a href="https://openvpn.net/index.php/access-server/pricing.html"&gt;licenses&lt;/a&gt; for the OpenVPN
Access Server if you plan to have more than two client connections at a time. But I find them
to be reasonably priced.&lt;/p&gt;
&lt;p&gt;For the record, this was documented based on OpenVPN Access Server 2.1.4 and is meant as
a rough but coherent guide to the external references I used to get this working. Hopefully
it will save someone some time.&lt;/p&gt;
&lt;h2&gt;OpenVPN Access Server Instance&lt;/h2&gt;
&lt;p&gt;First, go to the &lt;a href="https://aws.amazon.com/marketplace/"&gt;AWS Marketplace&lt;/a&gt; and find the 
&lt;a href="https://aws.amazon.com/marketplace/pp/B00MI40CAE"&gt;BYOL AMI for OpenVPN Access Server&lt;/a&gt;. Then,
follow their 
&lt;a href="https://docs.openvpn.net/how-to-tutorialsguides/virtual-platforms/amazon-web-services-ec2-tiered-appliance-quick-start-guide/"&gt;Quick Start Guide&lt;/a&gt;
to perform the initial configuration.&lt;/p&gt;
&lt;p&gt;A few things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you install this on a public subnet of your VPC;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the OpenVPN server EC2 instance an 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-eips.html"&gt;elastic IP address&lt;/a&gt;
so that if you stop and restart it the IP address won't change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Updates, Updates and More Updates&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do after you have finished the SSH questions and are logged
into the instance is to fully update it and then reboot it by running the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su -
apt-get update
apt-get dist-upgrade
shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please don't skip the reboot, so that all updates actually take effect, such as updates to the
kernel and to libraries that are currently being used by running processes.&lt;/p&gt;
&lt;h2&gt;Web Server Certificates&lt;/h2&gt;
&lt;p&gt;Now let's set up the OpenVPN Access Server web server so use &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; 
certificates with automated renewal.&lt;/p&gt;
&lt;p&gt;First, as &lt;code&gt;root&lt;/code&gt;, &lt;a href="https://certbot.eff.org/#ubuntuother-other"&gt;install certbot&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /root
wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing the certificates will require issuing custom commands using an OpenVPN Access Server
script, so we'll need to request the certificate &lt;a href="https://certbot.eff.org/docs/using.html#manual"&gt;manually&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Choose a hostname whithin a domain whose DNS records you control. Then, do the following 
as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./certbot-auto certonly --manual --preferred-challenges dns
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Follow the on-screen instructions, and when requested for the domain of the certificate enter 
the hostname you'll use for the OpenVPN server. It will ask you to create a TXT record on
the DNS configuration of the domain so that it validates that you do own the domain. &lt;/p&gt;
&lt;p&gt;If you use Route53 then follow 
&lt;a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-creating.html"&gt;these instructions&lt;/a&gt;
to create the TXT record and you'll end up with something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TXT record" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/TXT_record.png"&gt;&lt;/p&gt;
&lt;p&gt;Take this time to also create an &lt;code&gt;A&lt;/code&gt; record set that maps the hostname of your OpenVPN server to the
Elastic IP address you assigned to it in the previous section.&lt;/p&gt;
&lt;p&gt;Finally, we need to configure OpenVPN Access Server to use these certificates. In order to be ready 
for automated renewal later on, let's do this by creating two scripts that I adapted
from &lt;a href="https://www.sideras.net/lets-encrypt-https-certificates-for-openvpn-as-access-server/"&gt;elsewhere&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; /root/pre-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli stop&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh

cat &amp;gt; /root/post-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.ca_bundle -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/fullchain.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.priv_key -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/privkey.pem`&amp;quot; &amp;gt; /dev/null&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.cert -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/cert.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli start&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please replace &lt;code&gt;openvpn.example.com&lt;/code&gt; in the code above with the actual hostname you chose for your OpenVPN 
server. Then, you immediately run the scripts to load the newly created certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/root/pre-hook.sh
/root/post-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use Route 53 we can setup the &lt;a href="https://certbot.eff.org/docs/using.html#renewing-certificates"&gt;automated renewal&lt;/a&gt;
of these certificates by using &lt;a href="https://github.com/jed/certbot-route53"&gt;certbot-route53&lt;/a&gt;. First, download the
 script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sL https://git.io/vylLx -o /root/certbot-route53.sh
chmod a+x /root/certbot-route53.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, ensure the IAM role associated with the OpenVPN instance has the following policy attached to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListHostedZones&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListHostedZonesByName&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ChangeResourceRecordSets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:GetHostedZone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListResourceRecordSets&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:route53:::hostedzone/&amp;lt;your hosted zone ID&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:GetChange&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:route53:::change/*&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, create a regular task executed twice a day by running &lt;code&gt;crontab -e&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; and entering the following new entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;certbot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;renew&lt;/span&gt; &lt;span class="c1"&gt;--pre-hook &amp;quot;/root/pre-hook.sh&amp;quot; --post-hook &amp;quot;/root/post-hook.sh&amp;quot; --manual-auth-hook &amp;quot;/root/certbot-route53.sh&amp;quot; --manual-cleanup-hook &amp;quot;/root/certbot-route53.sh&amp;quot; --quiet --manual-public-ip-logging-ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please choose an arbitrary number between 1 and 60 and replace the first &lt;code&gt;0&lt;/code&gt; in the above line. Also choose 
different hours (instead of &lt;code&gt;1,13&lt;/code&gt;) for executing this. If lots of people configure their cron jobs to  hit 
Let's Encrypt at exactly the same times we might end up with an accidental DDoS.&lt;/p&gt;
&lt;p&gt;At this point, you should be able to access the admin interface (by default in our example it would be
&lt;code&gt;https://openvpn.example.com:943/admin&lt;/code&gt;), and not get a warning about an invalid certificate. Just remove the
&lt;code&gt;/admin&lt;/code&gt; from the URL and you'll land on the 
&lt;a href="https://openvpn.net/index.php/access-server/section-faq-openvpn-as/client-configuration.html"&gt;user-focused page&lt;/a&gt; instead, where they can log in to download
the client software binaries and profile configuration, and also scan Google Authenticator QR codes.&lt;/p&gt;
&lt;p&gt;Go into the admin interface and perform the configuration that best suits your needs. We'll discuss two
particularly interesting aspects of the configuration next.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;You may choose to have OpenVPN use routing instead of NAT when it forwards traffic from the connected clients
into the VPC environment. If you do that, you can use its ability to assign different users or groups of users
IP addresses in different ranges. This, in turn, allows you to configure Security Group rules inside the VPC
that will only allow certain users or groups of users to communicate with specific services.&lt;/p&gt;
&lt;p&gt;If you do that, however, keep in mind that you'll need to take some additional steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the IP address ranges you assign VPN clients are &lt;em&gt;outside&lt;/em&gt; the CIDR range for the entire VPC.
So if your VPC has addresses on 172.16.0.0/16, you can't assign any part of that address space to VPN clients
even if there are no VPC subnets currently using them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll need to update your VPC routing configuration. For each CIDR of addresses that can be assigned to VPN 
clients, &lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#AddRemoveRoutes"&gt;add a new route&lt;/a&gt;
with that CIDR as the &lt;code&gt;Destination&lt;/code&gt; and the OpenVPN server instance as the &lt;code&gt;Target&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;Disable the source/destination check&lt;/a&gt; 
on the OpenVPN Access Server instance so that it can "answer for" other ranges of IP address in the AWS network
stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Authenticator&lt;/h2&gt;
&lt;p&gt;If everything else is working at this point, requiring users to have two-factor authentication using
Google Authenticator should be pretty easy by now. First, on the admin interface go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp;
&lt;code&gt;Client Settings&lt;/code&gt; and check the box that says &lt;code&gt;Require that users provide a Google Authenticator one-time 
password for every VPN login&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What it took me a while to figure out was how to enroll users. Basically what you do is create the user
normally in the admin interface in &lt;code&gt;User Management&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;User Permissions&lt;/code&gt;, and assign the user a password.&lt;/p&gt;
&lt;p&gt;Then, the end user must log in to the non-admin web interface (&lt;code&gt;https://openvpn.example.com:943&lt;/code&gt; in our
example), and choose &lt;code&gt;Login&lt;/code&gt; instead of &lt;code&gt;Connect&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="user login" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/user_login.png"&gt;&lt;/p&gt;
&lt;p&gt;In this page, they'll the given the choice to download a connection client or a profile configuration they
can import into an existing client. But they will also be displayed the QR code they'll scan using
Google Authenticator. Once they do that, everything should be good to go.&lt;/p&gt;
&lt;h2&gt;CloudWatch Logs Agent&lt;/h2&gt;
&lt;p&gt;Next let's configure the &lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;
so that the OpenVPN Server logs are centralized and easy to query if necessary, and also protected from any
attackers that might gain access to the server.&lt;/p&gt;
&lt;p&gt;Firstly, a minor adjustment is needed to allow the agent installation to go properly. The provided AWS
installation script checks &lt;code&gt;/etc/issue&lt;/code&gt; to determine which Linux distribution the machine uses. And OpenVPN
Access Server has a custom string in that file. So we'll need to edit it to make sure the first line starts 
with &lt;code&gt;Ubuntu&lt;/code&gt; or else the script will refuse to run.&lt;/p&gt;
&lt;p&gt;I also recommend assigning the machine its proper hostname by issuing the following command as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostname openvpn.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, make sure you edit &lt;code&gt;/etc/hostname&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt; to make sure they also match the the full hostname.&lt;/p&gt;
&lt;p&gt;Finally, you can then execute the 
&lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;official AWS installation instructions&lt;/a&gt;
with the following three recommendations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you include &lt;code&gt;/var/log/openvpnas.log&lt;/code&gt;, &lt;code&gt;/var/log/syslog&lt;/code&gt; and &lt;code&gt;/var/log/auth.log&lt;/code&gt; to the log
collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked what the log stream name should be, I recommend you use the newly-configured machine name
for clarity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked about the timestamp format, choose to use a custom format and enter &lt;code&gt;%Y-%m-%dT%H:%M:%S%z&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, update &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; as per &lt;a href="http://serverfault.com/a/592120"&gt;these instructions&lt;/a&gt; and
restart the rsyslog service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service rsyslog restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you'll need to enable the service to run via systemd (as &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; awslogs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see the new log groups on the AWS Console.&lt;/p&gt;
&lt;p&gt;I would also like to suggest that you create a new file &lt;code&gt;/etc/logrotate.d/openvpnas&lt;/code&gt; with the following
content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openvpnas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
  &lt;span class="n"&gt;daily&lt;/span&gt;
  &lt;span class="n"&gt;compress&lt;/span&gt;
  &lt;span class="n"&gt;missingok&lt;/span&gt;
  &lt;span class="n"&gt;notifempty&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Additional Recommendations&lt;/h2&gt;
&lt;p&gt;A few security-minded tips that I would recommend you implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure you close off SSH access to the OpenVPN box after you're done configuring it, by removing the
applicable Security Group inbound rule. If you need in you can always do that through the VPN access
itself later on. And if you lock yourself out, you can always allow it temporarily again on the Security
Group if and when you need it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;SSL Settings&lt;/code&gt; and select &lt;code&gt;TLS 1.1&lt;/code&gt; as the minimum 
for both the web server and OpenVPN server, as per 
&lt;a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols"&gt;industry best practice&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;Advanced VPN Settings&lt;/code&gt;. Under 
&lt;code&gt;Additional OpenVPN Config Directives (Advanced)&lt;/code&gt;, replace &lt;code&gt;AES-128-CBC&lt;/code&gt; with &lt;code&gt;AES-256-CBC&lt;/code&gt; in both the
 client and server configuration directives for increased encryption security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harden the operating system and make sure to keep install security updates as they become available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AWS"></category><category term="Linux"></category><category term="OpenVPN"></category></entry></feed>