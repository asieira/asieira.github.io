<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>InfoSec Zanshin</title><link href="https://asieira.github.io/" rel="alternate"></link><link href="https://asieira.github.io/feeds/all.atom.xml" rel="self"></link><id>https://asieira.github.io/</id><updated>2019-06-28T15:17:00-03:00</updated><entry><title>Highlights from AWS re:Inforce 2019</title><link href="https://asieira.github.io/highlights-from-aws-reinforce-2019.html" rel="alternate"></link><published>2019-06-28T15:17:00-03:00</published><updated>2019-06-28T15:17:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2019-06-28:/highlights-from-aws-reinforce-2019.html</id><summary type="html">&lt;p&gt;A not at all impartial view of AWS' first security-only event&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I had the pleasure of attending the first ever edition of &lt;a href="https://reinforce.awsevents.com/"&gt;AWS re:Inforce&lt;/a&gt;. In this post I'll try to summarize my impressions of the event, plus include comments and references to the main points of attention and associated documentation and related session videos.&lt;/p&gt;
&lt;h2&gt;Overall Impressions&lt;/h2&gt;
&lt;p&gt;The event was held at the &lt;a href="https://www.signatureboston.com/bcec/getting-here"&gt;Boston Convention and Exhibition Center&lt;/a&gt; on June 25&lt;sup&gt;th&lt;/sup&gt; and 26&lt;sup&gt;th&lt;/sup&gt;. This was my first contact with this venue, but found it perfect to accomodate an event of this size. I did, however, found a telling lack of available lodging with some astronomical hotel rates and a severe shortage of close-by AirBnb offers even registering about one month in advance.&lt;/p&gt;
&lt;p&gt;Overall, I fully support AWS' wonderful idea to start separate focused conferences. I attended &lt;a href="https://reinvent.awsevents.com/"&gt;re:Invent&lt;/a&gt; last year in Las Vegas and it was quite simply too big to be enjoyable. I had a much better time at &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt; and was pleasantly surprised to actually make it to a few sessions as a walk-in without needing to queue a full hour in advance.&lt;/p&gt;
&lt;p&gt;The show floor had a decent size, but a portion of the size of a single of the original rooms of the RSA Conference Expo in Moscone West or East. Still, it was a single large room containing both the sponsor booths and the AWS Developer Lounges, CTF, Breakout Session spaces and tables used for lunch, a break from it all or impromptu meetings. Again a very pleasant, spacious experience.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;Sponsors getting ready for &lt;a href="https://twitter.com/hashtag/reinforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reinforce&lt;/a&gt; &lt;a href="https://t.co/oHns6yRvm8"&gt;pic.twitter.com/oHns6yRvm8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andres Riancho ‚òÅÔ∏è (@AndresRiancho) &lt;a href="https://twitter.com/AndresRiancho/status/1143220457883230208?ref_src=twsrc%5Etfw"&gt;24 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;There were areas with supported charities a few really nice touches I wish more conference organizers learn from. First, swag donation collectors:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;This is great. Would love to see similar at all conferences. &lt;a href="https://twitter.com/hashtag/reInforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reInforce&lt;/a&gt; &lt;a href="https://t.co/3Y8iJmiN4T"&gt;pic.twitter.com/3Y8iJmiN4T&lt;/a&gt;&lt;/p&gt;&amp;mdash; Chris Eng (@chriseng) &lt;a href="https://twitter.com/chriseng/status/1143896366592274434?ref_src=twsrc%5Etfw"&gt;26 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;And this is a good way to make the conference more inclusive:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;It‚Äôs great to see conferences doing this. This is a legit huge room with chairs and lights and carpet and everything you‚Äôd expect, not some random closet. &lt;a href="https://twitter.com/hashtag/ReInvent?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ReInvent&lt;/a&gt; &lt;a href="https://t.co/5sjd96ozdl"&gt;pic.twitter.com/5sjd96ozdl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Richard H. Boyd üî¨üéâ @ re:covery (@rchrdbyd) &lt;a href="https://twitter.com/rchrdbyd/status/1143879178707714049?ref_src=twsrc%5Etfw"&gt;26 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;In summary, my overall impression is that this was absolutely worth the time and money and I fully intend to attend &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt; again next year.&lt;/p&gt;
&lt;h2&gt;Keynote and Announcements&lt;/h2&gt;
&lt;p&gt;During the &lt;a href="https://reinforce.awsevents.com/learn/keynote/"&gt;keynote&lt;/a&gt;, Stephen E. Schmidt (AWS VP and CISO) was the ranking executive and led the announcements. By the way don't miss out on the hilarious Corey Quinn's &lt;a href="https://twitter.com/QuinnyPig/status/1143504072621867009"&gt;live-tweet thread&lt;/a&gt;, and you can also take a look at non-threaded posts from &lt;a href="https://twitter.com/AlexandreSieira/status/1143514790733725700"&gt;me&lt;/a&gt; and &lt;a href="https://twitter.com/fsmontenegro/status/1143508566499909637"&gt;Fernando Montenegro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the keynote two moments caught my attention. The first was when Schmidt jabbed Azure and other competitors for the &lt;a href="https://www.datacenterknowledge.com/microsoft/azure-outage-proves-hard-way-availability-zones-are-good-idea"&gt;comparatively bad track record on availability and regional redundancy&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="pt"&gt;&lt;p lang="en" dir="ltr"&gt;AWS throwing shade at competitors on region vs. availability zones &lt;a href="https://twitter.com/hashtag/reInforce?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reInforce&lt;/a&gt; &lt;a href="https://t.co/sg36GRjeXC"&gt;pic.twitter.com/sg36GRjeXC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Sieira (@AlexandreSieira) &lt;a href="https://twitter.com/AlexandreSieira/status/1143515510589546496?ref_src=twsrc%5Etfw"&gt;25 de junho de 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;The other one was having a representative from &lt;a href="https://en.wikipedia.org/wiki/Capital_One"&gt;Capital One&lt;/a&gt; go on stage to claim they will be entirely cloud-based by 2020. This is a major indication (if you still needed any) of the penetration that cloud adoption is having even on compliance-heavy industries. &lt;/p&gt;
&lt;p&gt;Out of the many new features and announcements, these were the ones that caught my attention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-vpc-traffic-mirroring/"&gt;VPC Traffic Mirroring&lt;/a&gt;, which is a big deal as this holds the promise of allowing several security product categories to be first-class citizens in AWS. This will mostly benefit mixed environment companies, which will be able to extend the NDR, NIDS or NDLP solutions they already use and love on-prem to cover AWS at least in part. Key caveats of this so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Despite the name, collection must be set up one &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html"&gt;ENI&lt;/a&gt; at a time. No way to set this up across the entire VPC as you would with &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html"&gt;Flow Logs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The replicated traffic generated by each instance will count against the overall bandwidth available to the instance, so do your capacity planning before deploying this in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/06/aws-security-hub-now-generally-available/"&gt;Security Hub is now GA&lt;/a&gt;. Security Hub's main advantage is providing a single dashboard, event format and 3rd party integration point for your AWS security, including native services like Macie and Guard Duty. The main limitation at this point is that even though it has cross-account support, it is a per-region service. So large organizations will still have multiple "panes of glass". Hope to see AWS work on that in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kD6JdUAKdV8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/06/aws-control-tower-is-now-generally-available/"&gt;Control Tower is now GA&lt;/a&gt;. Basically the story here is that AWS taking the lessons learned from &lt;a href="https://aws.amazon.com/solutions/aws-landing-zone/"&gt;Landing Zone&lt;/a&gt;, which is essentially a professional services only offer, and working towards allowing self-service automation of multi-account management native service. At this point it still is very much an MVP with several limitations, but should soon evolve into something invaluable so pay attention to future announcements from this team. Some of the key current limitations:&lt;ul&gt;
&lt;li&gt;Will only work on new environments and has no way to incorporate an existing &lt;a href="https://aws.amazon.com/organizations/"&gt;Organizations&lt;/a&gt; hierarchy;&lt;/li&gt;
&lt;li&gt;Does not allow you to create your own service control policies or "guard rails" as they call them in Control Tower lingo;&lt;/li&gt;
&lt;li&gt;Does not allow you to customize provided guard rails ones except for per-account On/Off status.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2t-VkWt0rKk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-opt-in-to-default-encryption-for-new-ebs-volumes/"&gt;Opt-in to Default Encryption for EBS Volumes&lt;/a&gt; which should make meeting compliance requirements by default a lot easier on larger organizations. Does not handle existing unencrypted EBS volumes, but then again it's simple enough to find those with &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/encrypted-volumes.html"&gt;Config&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Here are a few other resources if you want to learn more about what went on at &lt;a href="https://reinforce.awsevents.com/"&gt;re:Inforce&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLmbt_7-buHq-sx_JFNMsbkI5qHb0gWtfZ"&gt;Youtube playlist with all the recorded sessions&lt;/a&gt; by AWS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/security/reinforce-2019-wrap-up-and-session-links/"&gt;Re:Inforce 2019 wrap-up and session links&lt;/a&gt; by AWS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ashishrajan/aws-re-inforce-boston-2019-aws-security-conference-recap-what-they-didnt-tell-you-on-stage-9b7ecc04ddfe"&gt;AWS Re:inforce Boston 2019‚Äî AWS Security Conference: Recap (What they didn‚Äôt tell you on stage)&lt;/a&gt; by &lt;a href="https://medium.com/@ashishrajan"&gt;Ashish Rajan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="cloud"></category><category term="event"></category><category term="reInforce"></category></entry><entry><title>Connecting AWS VPCs with StrongSwan</title><link href="https://asieira.github.io/connecting-aws-vpcs-with-strongswan.html" rel="alternate"></link><published>2017-03-30T18:06:00-03:00</published><updated>2017-03-30T18:06:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2017-03-30:/connecting-aws-vpcs-with-strongswan.html</id><summary type="html">&lt;p&gt;Establishing a site-to-site IPsec VPN between VPCs in different regions on a budget&lt;/p&gt;</summary><content type="html">&lt;p&gt;On my &lt;a href="/using-openvpn-access-server-to-access-aws-vpcs.html"&gt;previous post&lt;/a&gt;
I covered how to allow client-to-site connectivity to an AWS 
&lt;a href="https://aws.amazon.com/documentation/vpc/"&gt;VPC&lt;/a&gt; environment.&lt;/p&gt;
&lt;p&gt;On this post I decided to continue exploring AWS VPC connectivity and talk about how to
connect VPCs. If you have VPCs on the same region, you could simply use
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-peering.html"&gt;VPC peering&lt;/a&gt; and
be done with it. But if your VPCs are located in different regions, you'll need to explore
your &lt;a href="https://aws.amazon.com/answers/networking/aws-multiple-region-multi-vpc-connectivity/"&gt;options&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to test and document one of the more inexpensive and simple options I could think of, 
full mesh connectivity between VPCs using IPsec site-to-site tunnels. And the &lt;em&gt;inexpensive&lt;/em&gt; part 
is taken care of by using &lt;a href="http://www.stronswan.org"&gt;StrongSwan&lt;/a&gt; 5.4.0 on 
&lt;a href="https://www.centos.org"&gt;CentOS&lt;/a&gt; 7 to implement this.&lt;/p&gt;
&lt;p&gt;Basically the scenario here is that I want to connect two VPCs on different regions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;us-east-1 VPC with IP addresses in 172.16.0.0/16;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;us-east-2 VPC with IP addresses in 172.31.0.0/16.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is a simple exercise to extrapolate this configuration to have additional VPCs connected
to these two via full mesh, so I won't get into the specifics of this here. Consider that
as homework.&lt;/p&gt;
&lt;h2&gt;IP Addresses and Security Groups&lt;/h2&gt;
&lt;p&gt;First, create one &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"&gt;Elastic IP Address&lt;/a&gt; 
for each StrongSwan instance. Optionally, create a hostname for each in Route53 if you
think that will help you later on.&lt;/p&gt;
&lt;p&gt;Then, create one 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html"&gt;security group&lt;/a&gt;
for each of the StrongSwan instances. Leave all outbound traffic as allowed, and create the 
following inbound rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create an SSH rule to allow you to log into the box later on;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow &lt;code&gt;All traffic&lt;/code&gt; from all of the VPC IP address ranges. In our example, this means 
allowing all traffic from 172.16.0.0/16 and 172.31.0.0/16 on the security group. This is 
necessary because when an instance acts a router, you can't differentiate traffic directed
to its own IP address or to one of the remote networks it can route to on the security group.
Any such differentiation will unfortunately need to be implemented internally in 
&lt;a href="https://wiki.centos.org/HowTos/Network/IPTables"&gt;iptables&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each of the other elastic IP addresses of StrongSwan instances it will need to 
connect to, create the following rules:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Port Range&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Time Exceeded&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Destination Unreachable&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Echo Reply&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Echo Request&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom ICMP Rule - IPv4&lt;/td&gt;
&lt;td&gt;Traceroute&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom Protocol&lt;/td&gt;
&lt;td&gt;AH (51)&lt;/td&gt;
&lt;td&gt;All&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom UDP Rule&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;4500&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom UDP Rule&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;&lt;em&gt;elastic IP&lt;/em&gt;/32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The ICMP rules above serve two purposes. Firstly, the traceroute and echo reply/request ones will 
make it easier for you to troubleshoot the connectivity between the StrongSwan instances. Most 
importantly, though, the time exceeded and destination unreachable entries are there to allow 
&lt;a href="https://en.wikipedia.org/wiki/Path_MTU_Discovery"&gt;path MTU discovery&lt;/a&gt; to happen properly between
StrongSwan instances communicating over the Internet.&lt;/p&gt;
&lt;p&gt;Next, update all of existing security groups in each VPC to ensure these same ICMP messages are 
accepted from all VPCs IP address ranges (172.16.0.0/16 and 172.31.0.0/16 in our example). The 
objective here is similar: to allow troubleshooting and proper path MTU discovery to happen on 
the end-to-end communications between machines on different VPCs through the VPN.&lt;/p&gt;
&lt;h2&gt;Create StrongSwan Instances and Configure Linux&lt;/h2&gt;
&lt;p&gt;This is what you need to keep in mind when creating the instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick the instance type you'll need. Something on the &lt;a href="https://aws.amazon.com/ec2/instance-types/#c4"&gt;c4 family&lt;/a&gt;
 for more heavy-duty traffic volumes, or something on the &lt;a href="https://aws.amazon.com/ec2/instance-types/#t2"&gt;t2&lt;/a&gt; 
 family should be more than enough for sporadic management / admin traffic;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the latest &lt;a href="https://aws.amazon.com/marketplace/pp/B00O7WM7QW/"&gt;CentOS 7 AMI&lt;/a&gt; to create a
 new instance on a public subnet of the chosen region with the security group we recently created;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-eips.html#WorkWithEIPs"&gt;Associate&lt;/a&gt; 
 the elastic IP address to the instance;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;Disable the source/destination check&lt;/a&gt;
 on the instance since it will act as a router.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, SSH into the machine (keep in mind the default username for the AMI is &lt;code&gt;centos&lt;/code&gt;) so
 we can configure the operating system properly. Make sure you become root for the following
 configuration steps.&lt;/p&gt;
&lt;p&gt;Ensure that &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; contains the following lines and then force them to be loaded by
running &lt;code&gt;sysctl -p /etc/sysctl.conf&lt;/code&gt; or by rebooting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.send_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.send_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.tcp_max_syn_backlog &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1280&lt;/span&gt;
net.ipv4.icmp_echo_ignore_broadcasts &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.accept_source_route &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.accept_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.secure_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.all.log_martians &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.default.accept_source_route &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.accept_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.conf.default.secure_redirects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
net.ipv4.icmp_echo_ignore_broadcasts &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.icmp_ignore_bogus_error_responses &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.tcp_syncookies &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.all.rp_filter &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.conf.default.rp_filter &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
net.ipv4.tcp_mtu_probing &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a side note, it is strongly recommended that you include &lt;code&gt;net.ipv4.tcp_mtu_probing = 1&lt;/code&gt; on the 
&lt;code&gt;sysctl.conf&lt;/code&gt; of all of your Linux EC2 instances, since they use jumbo frames by default.&lt;/p&gt;
&lt;p&gt;Let's make sure the machine is fully patched, that we can use EPEL and that we install StrongSwan
by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install epel-release
yum repolist
yum update
yum install strongswan
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; strongswan
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to ensure the cryptography and logging work properly, the system needs to have proper time
synchronization. Make sure &lt;a href="https://en.wikipedia.org/wiki/Network_Time_Protocol"&gt;NTP&lt;/a&gt; is installed and 
configured to run on system start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install ntp
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; ntpd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the &lt;code&gt;server&lt;/code&gt; configuration entries in &lt;code&gt;/etc/ntp.conf&lt;/code&gt; so the AWS recommended NTP 
server pool is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="m"&gt;0&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;1&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;2&lt;/span&gt;.amazon.pool.ntp.org iburst
server &lt;span class="m"&gt;3&lt;/span&gt;.amazon.pool.ntp.org iburst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, restart the NTP service with &lt;code&gt;systemctl restart ntpd&lt;/code&gt; and check that it is working properly 
with &lt;code&gt;ntpq -p&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Configuring StrongSwan&lt;/h2&gt;
&lt;p&gt;We'll configure StrongSwan to use RSA keys for authentication, so the first step is to create
those keys and associate them with the servers in the StrongSwan configuration.&lt;/p&gt;
&lt;p&gt;On each StrongSwan instance, create its own RSA key. This is how you would do it on the us-east-1
StrongSwan instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/strongswan/ipsec.d/private/
openssl genrsa -out us-east-1.key &lt;span class="m"&gt;4096&lt;/span&gt;
chmod og-r us-east-1.key
openssl rsa -in us-east-1.key -pubout &amp;gt; ../certs/us-east-1.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you do that, you need to edit &lt;code&gt;/etc/strongswan/ipsec.secrets&lt;/code&gt; to let StrongSwan know what to
do with the private key. Add a line to that file that associates each instance's own elastic IP address
to the key file. Assuming the elastic IP address of the us-east-1 StrongSwan instance is &lt;code&gt;1.2.3.4&lt;/code&gt;,
this is what that line would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4 : RSA us-east-1.key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, you copy each StrongSwan instance's &lt;code&gt;.pub&lt;/code&gt; file to the &lt;code&gt;/etc/strongswan/ipsec.d/certs&lt;/code&gt; 
directory of each of the other StrongSwan instances. In our example, if you were on the us-east-1 
instance you would see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find /etc/strongswan/ipsec.d/ -name *.key
/etc/strongswan/ipsec.d/private/us-east-1.key
$ find /etc/strongswan/ipsec.d/ -name *.pub
/etc/strongswan/ipsec.d/certs/us-east-1.pub
/etc/strongswan/ipsec.d/certs/us-east-2.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you configure &lt;code&gt;/etc/strongswan/ipsec.conf&lt;/code&gt; to tie it all together. This is what the
configuration file would look like the the elastic IP for the us-east-1 and us-east-2 instances
were 1.2.3.4 and 2.3.4.5, respectively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;config setup
    &lt;span class="c1"&gt;# strictcrlpolicy=yes&lt;/span&gt;
    &lt;span class="c1"&gt;# uniqueids = no&lt;/span&gt;

conn %default
    &lt;span class="nv"&gt;fragmentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;force
    &lt;span class="nv"&gt;dpdaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart
    &lt;span class="nv"&gt;ike&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-prfsha256-ecp256-ecp521,aes192-sha256-modp3072
    &lt;span class="nv"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-ecp256,aes192-sha256-modp3072#
    &lt;span class="nv"&gt;keyingtries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%forever
    &lt;span class="nv"&gt;keyexchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ikev2
    &lt;span class="nv"&gt;authby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsasig
    &lt;span class="nv"&gt;forceencaps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;leftid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
    &lt;span class="nv"&gt;leftrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1.pub
    &lt;span class="nv"&gt;leftsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/16

&lt;span class="c1"&gt;# Add connections here.&lt;/span&gt;
conn us-east-2
    &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.3.4.5
    &lt;span class="nv"&gt;rightsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.0.0/16
    &lt;span class="nv"&gt;rightrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-2.pub
    &lt;span class="nv"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Keep in mind that &lt;code&gt;left&lt;/code&gt; in StrongSwan parlance means the side of the VPN that is local to 
the instance you are configuring, and &lt;code&gt;right&lt;/code&gt; is the remote side. So the configuration file on
the us-east-2 instance would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;config setup
    &lt;span class="c1"&gt;# strictcrlpolicy=yes&lt;/span&gt;
    &lt;span class="c1"&gt;# uniqueids = no&lt;/span&gt;

conn %default
    &lt;span class="nv"&gt;fragmentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;dpdaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restart
    &lt;span class="nv"&gt;ike&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-prfsha256-ecp256-ecp521,aes192-sha256-modp3072
    &lt;span class="nv"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes192gcm16-aes128gcm16-aes192-ecp256,aes192-sha256-modp3072#
    &lt;span class="nv"&gt;keyingtries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%forever
    &lt;span class="nv"&gt;keyexchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ikev2
    &lt;span class="nv"&gt;authby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsasig
    &lt;span class="nv"&gt;forceencaps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
    &lt;span class="nv"&gt;leftid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.3.4.5
    &lt;span class="nv"&gt;leftrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-2.pub
    &lt;span class="nv"&gt;leftsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.0.0/16

&lt;span class="c1"&gt;# Add connections here.&lt;/span&gt;
conn us-east-1
    &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
    &lt;span class="nv"&gt;rightsubnet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/16
    &lt;span class="nv"&gt;rightrsasigkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1.pub
    &lt;span class="nv"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please review the StrongSwan 
&lt;a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf"&gt;documentation on ipsec.conf&lt;/a&gt; to
better understand some of the choices I've made there, and tweak the setup to meet your needs.
I wouldn't change the configuration on the &lt;code&gt;fragmentation&lt;/code&gt; and &lt;code&gt;forceencaps&lt;/code&gt; options, though, 
since I had problems if they were not set as above.&lt;/p&gt;
&lt;p&gt;Once you've set all of this up, run &lt;code&gt;systemctl restart strongswan&lt;/code&gt; and monitor the logs with
&lt;code&gt;tail -f /var/log/messages | grep charon&lt;/code&gt; for log entries related to the IPsec tunnel 
negotiations and authentication.&lt;/p&gt;
&lt;p&gt;Hopefully by now you will be able to ping us-east-2's StrongSwan instance internal (172.31.0.x) 
IP address from the SSH session on us-east-1's StrongSwan instance.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;Finally, in order to allow machines on one region to talk to machines and services on the other,
we'll need to update the 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html"&gt;route tables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What you need to do is to 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#AddRemoveRoutes"&gt;add a new route&lt;/a&gt;
that tells machines on a region that in order to talk to the addresses on the other regions, they 
must go through the StrongSwan instance. &lt;/p&gt;
&lt;p&gt;So in our example, you should add a new route to all routing tables in us-east-1 that has a &lt;code&gt;Destination&lt;/code&gt;
of 172.31.0.0/16, and a &lt;code&gt;Target&lt;/code&gt; that is the instance ID of the us-east-1 StrongSwan instance.&lt;/p&gt;
&lt;p&gt;Conversely, you should add a new route to all routing tables in us-east-2 that has a &lt;code&gt;Destination&lt;/code&gt; of
172.16.0.0/16, and a &lt;code&gt;Target&lt;/code&gt; that is the instance ID of the us-east-2 StrongSwan instance.&lt;/p&gt;
&lt;p&gt;Finally, make sure that the security groups of services that need to be accessed across the VPN
will now allow the IP addresses of the remote machines in. Once you do that, you can then test the
communication between regions successfully. Of course, if you enabled ICMP as recommended above,
you should be able to ping any instance in us-east-2 from any instance in us-east-1 and vice-versa
by now.&lt;/p&gt;
&lt;h2&gt;Availability Concerns&lt;/h2&gt;
&lt;p&gt;You could achieve some level of redundancy and distribution of load by increasing the number
of VPN concentrator instances you stand up. &lt;/p&gt;
&lt;p&gt;One idea would be to create one VPN concentrator per availability zone instead of just one per
region. In this scenario even if one availability zone (or its StrongSwan instance) become
unavailable, the rest of the availability zones will remain connected.&lt;/p&gt;
&lt;p&gt;This is a high level guide of what that would entail in addition to what was discussed
above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the additional StrongSwan instances as per the instructions above;&lt;/li&gt;
&lt;li&gt;Separate the routing tables per availability zone and assign each one to its corresponding 
subnets;&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;ipsec.conf&lt;/code&gt; on all machines to have one connection for each VPN concentrator. Also
update each one's &lt;code&gt;leftsubnet&lt;/code&gt; and &lt;code&gt;rightsubnet&lt;/code&gt; definitions so that each server is only 
responsible for the IP address ranges of the subnets in its availability zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have not covered implementing HA on StrongSwan, though apparently that is 
&lt;a href="https://wiki.strongswan.org/projects/strongswan/wiki/HighAvailability"&gt;supported&lt;/a&gt; as well.
If you get this working let me know.&lt;/p&gt;
&lt;h2&gt;Additional Recommendations&lt;/h2&gt;
&lt;p&gt;A few security-minded tips that I would recommend you implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure you close off SSH access to the StrongSwan instances after you're done configuring them, 
by removing the applicable Security Group inbound rule. You can always allow it temporarily again 
on the Security Group if and when you need it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the
&lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;
on the machine, remember we covered this already 
&lt;a href="/using-openvpn-access-server-to-access-aws-vpcs.html"&gt;here&lt;/a&gt;. Make sure you collect at least the
following files: &lt;code&gt;/var/log/messages&lt;/code&gt;, &lt;code&gt;/var/log/secure&lt;/code&gt; and &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harden the operating system and make sure to keep install security updates as they become available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AWS"></category><category term="Linux"></category><category term="StrongSwan"></category></entry><entry><title>Using OpenVPN Access Server to Access AWS VPCs</title><link href="https://asieira.github.io/using-openvpn-access-server-to-access-aws-vpcs.html" rel="alternate"></link><published>2017-03-16T09:10:00-03:00</published><updated>2017-03-16T09:10:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2017-03-16:/using-openvpn-access-server-to-access-aws-vpcs.html</id><summary type="html">&lt;p&gt;Establishing a client-to-site VPN with AWS VPCs using auto-renewing Let's Encrypt certificates&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you use AWS for anything non-trivial, you are likely using 
 &lt;a href="https://aws.amazon.com/documentation/vpc/"&gt;VPCs&lt;/a&gt; and keeping some non-public subnets for 
 resources you don't want to be accessible to the open Internet. &lt;/p&gt;
&lt;p&gt;Usually when this is done, a 
&lt;a href="https://aws.amazon.com/blogs/security/how-to-record-ssh-sessions-established-through-a-bastion-host/"&gt;bastion host&lt;/a&gt; is set up on a VPC public subnet and accessed via 
 SSH to reach those internal instances or resources, through secondary SSH connections or 
 SSH tunnels. That is a good and simple solution that will work well for a simple environment
 with few internal services and few users that need to access it.&lt;/p&gt;
&lt;p&gt;However, I would like to explore an alternative: using
&lt;a href="https://openvpn.net/index.php/access-server/on-amazon-cloud.html"&gt;OpenVPN Access Server&lt;/a&gt; to 
create a client-to-site VPN connection to the VPC. This approach is really easy to implement
and has some pretty interesting benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easy set up of two-factor authentication with 
&lt;a href="https://en.wikipedia.org/wiki/Google_Authenticator"&gt;Google Authenticator&lt;/a&gt; or similar TOTP
solutions. This is something you could also achieve with the bastion host as well using some 
&lt;a href="https://sysconfig.org.uk/two-factor-authentication-with-ssh.html"&gt;PAM magic&lt;/a&gt; if you really 
want to, by the way. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of different IP address ranges to users of different groups, which allows different 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html"&gt;Security Group&lt;/a&gt; 
inbound rules on assets for internal resources based on who the authenticated VPN users are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A web interface for your users that simplifies the task of downloading the VPN client with
the proper connection profile, which is far more manageable for users that are not of a 
strong technical background.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commercial support from the team at 
&lt;a href="https://openvpn.net/index.php/login.html"&gt;OpenVPN&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the downsides is that this solution will require you to buy 
&lt;a href="https://openvpn.net/index.php/access-server/pricing.html"&gt;licenses&lt;/a&gt; for the OpenVPN
Access Server if you plan to have more than two client connections at a time. But I find them
to be reasonably priced.&lt;/p&gt;
&lt;p&gt;For the record, this was documented based on OpenVPN Access Server 2.1.4 and is meant as
a rough but coherent guide to the external references I used to get this working. Hopefully
it will save someone some time.&lt;/p&gt;
&lt;h2&gt;OpenVPN Access Server Instance&lt;/h2&gt;
&lt;p&gt;First, go to the &lt;a href="https://aws.amazon.com/marketplace/"&gt;AWS Marketplace&lt;/a&gt; and find the 
&lt;a href="https://aws.amazon.com/marketplace/pp/B00MI40CAE"&gt;BYOL AMI for OpenVPN Access Server&lt;/a&gt;. Then,
follow their 
&lt;a href="https://docs.openvpn.net/how-to-tutorialsguides/virtual-platforms/amazon-web-services-ec2-tiered-appliance-quick-start-guide/"&gt;Quick Start Guide&lt;/a&gt;
to perform the initial configuration.&lt;/p&gt;
&lt;p&gt;A few things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you install this on a public subnet of your VPC;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the OpenVPN server EC2 instance an 
&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-eips.html"&gt;elastic IP address&lt;/a&gt;
so that if you stop and restart it the IP address won't change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Updates, Updates and More Updates&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do after you have finished the SSH questions and are logged
into the instance is to fully update it and then reboot it by running the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su -
apt-get update
apt-get dist-upgrade
shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please don't skip the reboot, so that all updates actually take effect, such as updates to the
kernel and to libraries that are currently being used by running processes.&lt;/p&gt;
&lt;h2&gt;Web Server Certificates&lt;/h2&gt;
&lt;p&gt;Now let's set up the OpenVPN Access Server web server so use &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; 
certificates with automated renewal.&lt;/p&gt;
&lt;p&gt;First, as &lt;code&gt;root&lt;/code&gt;, &lt;a href="https://certbot.eff.org/#ubuntuother-other"&gt;install certbot&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /root
wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing the certificates will require issuing custom commands using an OpenVPN Access Server
script, so we'll need to request the certificate &lt;a href="https://certbot.eff.org/docs/using.html#manual"&gt;manually&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Choose a hostname whithin a domain whose DNS records you control. Then, do the following 
as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./certbot-auto certonly --manual --preferred-challenges dns
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Follow the on-screen instructions, and when requested for the domain of the certificate enter 
the hostname you'll use for the OpenVPN server. It will ask you to create a TXT record on
the DNS configuration of the domain so that it validates that you do own the domain. &lt;/p&gt;
&lt;p&gt;If you use Route53 then follow 
&lt;a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-creating.html"&gt;these instructions&lt;/a&gt;
to create the TXT record and you'll end up with something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TXT record" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/TXT_record.png"&gt;&lt;/p&gt;
&lt;p&gt;Take this time to also create an &lt;code&gt;A&lt;/code&gt; record set that maps the hostname of your OpenVPN server to the
Elastic IP address you assigned to it in the previous section.&lt;/p&gt;
&lt;p&gt;Finally, we need to configure OpenVPN Access Server to use these certificates. In order to be ready 
for automated renewal later on, let's do this by creating two scripts that I adapted
from &lt;a href="https://www.sideras.net/lets-encrypt-https-certificates-for-openvpn-as-access-server/"&gt;elsewhere&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; /root/pre-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli stop&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh

cat &amp;gt; /root/post-hook.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.ca_bundle -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/fullchain.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.priv_key -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/privkey.pem`&amp;quot; &amp;gt; /dev/null&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/confdba -mk cs.cert -v &amp;quot;`cat /etc/letsencrypt/live/openvpn.example.com/cert.pem`&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;/usr/local/openvpn_as/scripts/sacli start&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

chmod a+x /root/pre-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please replace &lt;code&gt;openvpn.example.com&lt;/code&gt; in the code above with the actual hostname you chose for your OpenVPN 
server. Then, you immediately run the scripts to load the newly created certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/root/pre-hook.sh
/root/post-hook.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use Route 53 we can setup the &lt;a href="https://certbot.eff.org/docs/using.html#renewing-certificates"&gt;automated renewal&lt;/a&gt;
of these certificates by using &lt;a href="https://github.com/jed/certbot-route53"&gt;certbot-route53&lt;/a&gt;. First, download the
 script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sL https://git.io/vylLx -o /root/certbot-route53.sh
chmod a+x /root/certbot-route53.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, ensure the IAM role associated with the OpenVPN instance has the following policy attached to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListHostedZones&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListHostedZonesByName&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ChangeResourceRecordSets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:GetHostedZone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:ListResourceRecordSets&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:route53:::hostedzone/&amp;lt;your hosted zone ID&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;route53:GetChange&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:route53:::change/*&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, create a regular task executed twice a day by running &lt;code&gt;crontab -e&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; and entering the following new entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;certbot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;renew&lt;/span&gt; &lt;span class="c1"&gt;--pre-hook &amp;quot;/root/pre-hook.sh&amp;quot; --post-hook &amp;quot;/root/post-hook.sh&amp;quot; --manual-auth-hook &amp;quot;/root/certbot-route53.sh&amp;quot; --manual-cleanup-hook &amp;quot;/root/certbot-route53.sh&amp;quot; --quiet --manual-public-ip-logging-ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please choose an arbitrary number between 1 and 60 and replace the first &lt;code&gt;0&lt;/code&gt; in the above line. Also choose 
different hours (instead of &lt;code&gt;1,13&lt;/code&gt;) for executing this. If lots of people configure their cron jobs to  hit 
Let's Encrypt at exactly the same times we might end up with an accidental DDoS.&lt;/p&gt;
&lt;p&gt;At this point, you should be able to access the admin interface (by default in our example it would be
&lt;code&gt;https://openvpn.example.com:943/admin&lt;/code&gt;), and not get a warning about an invalid certificate. Just remove the
&lt;code&gt;/admin&lt;/code&gt; from the URL and you'll land on the 
&lt;a href="https://openvpn.net/index.php/access-server/section-faq-openvpn-as/client-configuration.html"&gt;user-focused page&lt;/a&gt; instead, where they can log in to download
the client software binaries and profile configuration, and also scan Google Authenticator QR codes.&lt;/p&gt;
&lt;p&gt;Go into the admin interface and perform the configuration that best suits your needs. We'll discuss two
particularly interesting aspects of the configuration next.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;You may choose to have OpenVPN use routing instead of NAT when it forwards traffic from the connected clients
into the VPC environment. If you do that, you can use its ability to assign different users or groups of users
IP addresses in different ranges. This, in turn, allows you to configure Security Group rules inside the VPC
that will only allow certain users or groups of users to communicate with specific services.&lt;/p&gt;
&lt;p&gt;If you do that, however, keep in mind that you'll need to take some additional steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the IP address ranges you assign VPN clients are &lt;em&gt;outside&lt;/em&gt; the CIDR range for the entire VPC.
So if your VPC has addresses on 172.16.0.0/16, you can't assign any part of that address space to VPN clients
even if there are no VPC subnets currently using them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll need to update your VPC routing configuration. For each CIDR of addresses that can be assigned to VPN 
clients, &lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#AddRemoveRoutes"&gt;add a new route&lt;/a&gt;
with that CIDR as the &lt;code&gt;Destination&lt;/code&gt; and the OpenVPN server instance as the &lt;code&gt;Target&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;Disable the source/destination check&lt;/a&gt; 
on the OpenVPN Access Server instance so that it can "answer for" other ranges of IP address in the AWS network
stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Authenticator&lt;/h2&gt;
&lt;p&gt;If everything else is working at this point, requiring users to have two-factor authentication using
Google Authenticator should be pretty easy by now. First, on the admin interface go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp;
&lt;code&gt;Client Settings&lt;/code&gt; and check the box that says &lt;code&gt;Require that users provide a Google Authenticator one-time 
password for every VPN login&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What it took me a while to figure out was how to enroll users. Basically what you do is create the user
normally in the admin interface in &lt;code&gt;User Management&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;User Permissions&lt;/code&gt;, and assign the user a password.&lt;/p&gt;
&lt;p&gt;Then, the end user must log in to the non-admin web interface (&lt;code&gt;https://openvpn.example.com:943&lt;/code&gt; in our
example), and choose &lt;code&gt;Login&lt;/code&gt; instead of &lt;code&gt;Connect&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="user login" src="https://asieira.github.io/images/accessing-aws-vpc-with-openvpn-access-server/user_login.png"&gt;&lt;/p&gt;
&lt;p&gt;In this page, they'll the given the choice to download a connection client or a profile configuration they
can import into an existing client. But they will also be displayed the QR code they'll scan using
Google Authenticator. Once they do that, everything should be good to go.&lt;/p&gt;
&lt;h2&gt;CloudWatch Logs Agent&lt;/h2&gt;
&lt;p&gt;Next let's configure the &lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;
so that the OpenVPN Server logs are centralized and easy to query if necessary, and also protected from any
attackers that might gain access to the server.&lt;/p&gt;
&lt;p&gt;Firstly, a minor adjustment is needed to allow the agent installation to go properly. The provided AWS
installation script checks &lt;code&gt;/etc/issue&lt;/code&gt; to determine which Linux distribution the machine uses. And OpenVPN
Access Server has a custom string in that file. So we'll need to edit it to make sure the first line starts 
with &lt;code&gt;Ubuntu&lt;/code&gt; or else the script will refuse to run.&lt;/p&gt;
&lt;p&gt;I also recommend assigning the machine its proper hostname by issuing the following command as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostname openvpn.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, make sure you edit &lt;code&gt;/etc/hostname&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt; to make sure they also match the the full hostname.&lt;/p&gt;
&lt;p&gt;Finally, you can then execute the 
&lt;a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html"&gt;official AWS installation instructions&lt;/a&gt;
with the following three recommendations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you include &lt;code&gt;/var/log/openvpnas.log&lt;/code&gt;, &lt;code&gt;/var/log/syslog&lt;/code&gt; and &lt;code&gt;/var/log/auth.log&lt;/code&gt; to the log
collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked what the log stream name should be, I recommend you use the newly-configured machine name
for clarity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked about the timestamp format, choose to use a custom format and enter &lt;code&gt;%Y-%m-%dT%H:%M:%S%z&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, update &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; as per &lt;a href="http://serverfault.com/a/592120"&gt;these instructions&lt;/a&gt; and
restart the rsyslog service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service rsyslog restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you'll need to enable the service to run via systemd (as &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; awslogs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see the new log groups on the AWS Console.&lt;/p&gt;
&lt;p&gt;I would also like to suggest that you create a new file &lt;code&gt;/etc/logrotate.d/openvpnas&lt;/code&gt; with the following
content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openvpnas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
  &lt;span class="n"&gt;daily&lt;/span&gt;
  &lt;span class="n"&gt;compress&lt;/span&gt;
  &lt;span class="n"&gt;missingok&lt;/span&gt;
  &lt;span class="n"&gt;notifempty&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Additional Recommendations&lt;/h2&gt;
&lt;p&gt;A few security-minded tips that I would recommend you implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensure you close off SSH access to the OpenVPN box after you're done configuring it, by removing the
applicable Security Group inbound rule. If you need in you can always do that through the VPN access
itself later on. And if you lock yourself out, you can always allow it temporarily again on the Security
Group if and when you need it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;SSL Settings&lt;/code&gt; and select &lt;code&gt;TLS 1.1&lt;/code&gt; as the minimum 
for both the web server and OpenVPN server, as per 
&lt;a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols"&gt;industry best practice&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the web admin interface, go to &lt;code&gt;Configuration&lt;/code&gt; &amp;nbsp;&amp;rarr;&amp;nbsp; &lt;code&gt;Advanced VPN Settings&lt;/code&gt;. Under 
&lt;code&gt;Additional OpenVPN Config Directives (Advanced)&lt;/code&gt;, replace &lt;code&gt;AES-128-CBC&lt;/code&gt; with &lt;code&gt;AES-256-CBC&lt;/code&gt; in both the
 client and server configuration directives for increased encryption security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harden the operating system and make sure to keep install security updates as they become available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AWS"></category><category term="Linux"></category><category term="OpenVPN"></category></entry><entry><title>Using OpenMP with R packages in OS X</title><link href="https://asieira.github.io/using-openmp-with-r-packages-in-os-x.html" rel="alternate"></link><published>2016-07-21T18:01:00-03:00</published><updated>2016-07-21T18:01:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-07-21:/using-openmp-with-r-packages-in-os-x.html</id><summary type="html">&lt;p&gt;Using OpenMP to allow parallel computation in R packages on Mac OS X&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lots of R packages have underlying implementations in C and C++, so they need to be compiled to
function properly. But when you install a package in OS X you will probably get a pre-compiled version
of said package from &lt;a href="https://cran.r-project.org/"&gt;CRAN&lt;/a&gt; that used their build environment and the
default package options.&lt;/p&gt;
&lt;p&gt;Using a pre-compiled package is almost never a problem, except when the default options don't fit
your requirements. In that case, you'll need to install them from source and make sure you get
the compilation environment right.&lt;/p&gt;
&lt;p&gt;I recently ran into a package that had the capability of using &lt;a href="http://openmp.org/"&gt;OpenMP&lt;/a&gt; to perform
computation in parallel and take advantage of my MacBook Pro's multi-core processor to the fullest.
If you are interested in how this works and how to integrate it into your own R packages, check out
the &lt;a href="https://wrathematics.github.io/RparallelGuide/"&gt;Parallelism, R, and OpenMP&lt;/a&gt; guide by 
&lt;a href="https://wrathematics.github.io/"&gt;Drew Schmidt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So this is all awesome, but there's a catch. There's always a catch, right?&lt;/p&gt;
&lt;p&gt;Turns out the binary version of packages available at &lt;a href="https://cran.r-project.org/"&gt;CRAN&lt;/a&gt; are not
compiled to use OpenMP, since not all systems are equipped to support it. Moreover, if you try to 
install the package from source on OS X, it will try to use &lt;code&gt;clang&lt;/code&gt; / &lt;code&gt;clang++&lt;/code&gt; which in my experience
does not support OpenMP either.&lt;/p&gt;
&lt;p&gt;Before I get into how I was eventually able to fix this, if you don't have &lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt;
installed on your Mac yet, stop everything and go install it. Yes, now. I'll wait.&lt;/p&gt;
&lt;p&gt;So, I found lots of outdated references to a homebrew package called &lt;code&gt;clang-omp&lt;/code&gt;, but as you can see
at its &lt;a href="https://clang-omp.github.io/"&gt;website&lt;/a&gt; the project was moved elsewhere. And it doesn't exist
in homebrew anymore, so that is a dead end.&lt;/p&gt;
&lt;p&gt;What finally worked for me was to install GCC 6 using homebrew, and using it to compile the R packages
with OpenMP support. This is how you do it using homebrew:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install gcc --without-multilib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's important to include &lt;code&gt;--without-multilib&lt;/code&gt; since it apparently 
&lt;a href="http://stackoverflow.com/questions/30049486/what-does-gcc-without-multilib-mean"&gt;creates problems&lt;/a&gt; with
OpenMP. Unless you're cross-compiling to different architectures you probably won't miss it anyway.&lt;/p&gt;
&lt;p&gt;If you already had gcc installed with homebrew, just replace &lt;code&gt;install&lt;/code&gt; above with &lt;code&gt;reinstall&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After you do that, you'll notice that gcc executables should have been linked to &lt;code&gt;/usr/local/bin&lt;/code&gt;. Next, 
what you'll need to do is to create (or edit) &lt;code&gt;~/.R/Makevars&lt;/code&gt; to reference them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/gcc-6
&lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-6
&lt;span class="nv"&gt;CXX1X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-6
&lt;span class="nv"&gt;CXX11&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-6
&lt;span class="nv"&gt;SHLIB_CXXLD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-6
&lt;span class="nv"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/gfortran-6
&lt;span class="nv"&gt;F77&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/gfortran-6
&lt;span class="nv"&gt;MAKE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;make -j8

&lt;span class="nv"&gt;SHLIB_OPENMP_CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-fopenmp
&lt;span class="nv"&gt;SHLIB_OPENMP_CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-fopenmp
&lt;span class="nv"&gt;SHLIB_OPENMP_FCFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-fopenmp
&lt;span class="nv"&gt;SHLIB_OPENMP_FFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-fopenmp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you adjust the major version on the executable file names to match what homebrew installed in 
the last step.&lt;/p&gt;
&lt;p&gt;After all this, uninstall the R packages you want to with OpenMP with, and 
&lt;a href="http://stackoverflow.com/questions/1474081/how-do-i-install-an-r-package-from-source"&gt;reinstall them from source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's it! Hopefully you will now have a working OpenMP-enabled R package to work with.&lt;/p&gt;</content><category term="R"></category></entry><entry><title>Introducing SnakeCharmR</title><link href="https://asieira.github.io/introducing-snakecharmr.html" rel="alternate"></link><published>2016-06-13T19:17:00-03:00</published><updated>2016-06-13T19:17:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-06-13:/introducing-snakecharmr.html</id><summary type="html">&lt;p&gt;A modern R package to allow Python to be called from R&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been using &lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt; for some time 
in Linux and Mac OS X environments. When I first found out about it, the idea of using JSON as a way to
serialize and deserialize values between Python and R was beautifully simple and intuitive.&lt;/p&gt;
&lt;p&gt;However, over time I realized &lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt; 
suffered from a more than a few issues. Plus, I noticed that the codebase hadn't been updated in a long
time, was based on direct C code and used RJSONIO for the underlying JSON conversions.&lt;/p&gt;
&lt;p&gt;So I decided to create a new package called &lt;a href="https://github.com/asieira/SnakeCharmR"&gt;SnakeCharmR&lt;/a&gt; inspired
by &lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt; but with the following differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="https://cran.r-project.org/web/packages/Rcpp/index.html"&gt;Rcpp&lt;/a&gt; instead of direct R to C bindings;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace &lt;a href="https://cran.r-project.org/web/packages/RJSONIO/index.html"&gt;RJSONIO&lt;/a&gt; with the much more 
well-behaved &lt;a href="https://cran.r-project.org/web/packages/jsonlite/index.html"&gt;jsonlite&lt;/a&gt; for JSON serialization
/ deserialization;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow the calling code to have full control of the options to be passed to &lt;code&gt;jsonlite::fromJSON&lt;/code&gt; and 
&lt;code&gt;jsonlite::toJSON&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="https://cran.r-project.org/web/packages/testthat/index.html"&gt;testthat&lt;/a&gt; for unit testing as
much as possible, including &lt;a href="https://travis-ci.org/asieira/SnakeCharmR"&gt;Travis&lt;/a&gt; and
&lt;a href="https://codecov.io/gh/asieira/SnakeCharmR"&gt;Codecov&lt;/a&gt; for automation of tests and coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The package is not a drop-in replacement to rPython, but most of existing code will require very few updates
to work with it. Most of them will be related to the differences between RJSONIO and jsonlite.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;The package has not yet been submitted to CRAN, so currently this is how you install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;devtools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;install_github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;asieira/SnakeCharmR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please refer to the &lt;a href="https://github.com/asieira/SnakeCharmR/blob/master/README.md"&gt;README&lt;/a&gt; for more details
on linking with the proper Python version.&lt;/p&gt;
&lt;h2&gt;Comparison with &lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few examples of differences in the way &lt;a href="https://github.com/asieira/SnakeCharmR"&gt;SnakeCharmR&lt;/a&gt; and 
&lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt; handle some situations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/asieira/SnakeCharmR"&gt;SnakeCharmR&lt;/a&gt; will correctly remove any temporary values used
for function/method arguments and/or serialized values from the Python environment. In the case
of &lt;a href="https://cran.r-project.org/web/packages/rPython/index.html"&gt;rPython&lt;/a&gt;, they would remain in memory
until overwritten by another operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling of strings with single quotes:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rPython&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; [ &amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt; ] &amp;#39;&lt;/span&gt;
                 &lt;span class="n"&gt;^&lt;/span&gt;
&lt;span class="n"&gt;SyntaxError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EOL&lt;/span&gt; &lt;span class="n"&gt;while&lt;/span&gt; &lt;span class="n"&gt;scanning&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt; &lt;span class="n"&gt;v1.0.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
&lt;span class="n"&gt;Contribute&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asieira&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Handling of strings with unicode values:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rPython&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;√°√©√≠√≥√∫&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\xe1\xe9\xed\xf3\xfa&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;python.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt; &lt;span class="n"&gt;v1.0.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
&lt;span class="n"&gt;Contribute&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asieira&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;√°√©√≠√≥√∫&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;√°√©√≠√≥√∫&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;py.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Improved exception handling, which in &lt;a href="https://github.com/asieira/SnakeCharmR"&gt;SnakeCharmR&lt;/a&gt; now 
includes a full stack trace to help debugging errors that happen in Python:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rPython&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def a():\n    return b()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def b():\n    raise Exception(&amp;#39;uh oh&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;python.call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;python.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python.command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uh&lt;/span&gt; &lt;span class="n"&gt;oh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt; &lt;span class="n"&gt;v1.0.2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
&lt;span class="n"&gt;Contribute&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asieira&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SnakeCharmR&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def a():\n    return b()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def b():\n    raise Exception(&amp;#39;uh oh&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;py.call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;py.exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_SnakeCharmR_return = json.dumps(%s(%s))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; 
  &lt;span class="nf"&gt;Traceback &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uh&lt;/span&gt; &lt;span class="n"&gt;oh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Future Improvements&lt;/h2&gt;
&lt;p&gt;There are still a few pending issues to work on before SnakeCharmR can be submitted to CRAN, check
out &lt;a href="https://github.com/asieira/SnakeCharmR/issues"&gt;GitHub issues&lt;/a&gt; and help if you can.&lt;/p&gt;
&lt;p&gt;The most relevant gap is testing and ensuring SnakeCharmR works correctly on Windows. If any of you 
have had experience with compiling Rcpp packages that use external libraries on Windows, your help 
will be much appreciated.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/hrbrmstr"&gt;Bob Rudis&lt;/a&gt; for his invaluable help in getting this 
project going. &lt;/p&gt;</content><category term="R"></category><category term="Python"></category></entry><entry><title>In Memoriam: Lucas Eustaquio Gomes da Silva (August 27th 1982 - April 24th, 2016)</title><link href="https://asieira.github.io/in-memoriam-lucas-eustaquio-gomes-da-silva-august-27th-1982-april-24th-2016.html" rel="alternate"></link><published>2016-04-24T19:22:00-03:00</published><updated>2016-04-24T19:22:00-03:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-04-24:/in-memoriam-lucas-eustaquio-gomes-da-silva-august-27th-1982-april-24th-2016.html</id><summary type="html">&lt;p&gt;Celebrating the life and achievements of an outstanding man.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today myself and the rest of the Niddel team were devastated to learn that our dear friend 
&lt;a href="https://br.linkedin.com/in/lucas-eustaquio-gomes-da-silva-16522816"&gt;Lucas Eustaquio Gomes da Silva&lt;/a&gt;,
our Senior Data Scientist since August 2013, has passed away after a brave battle against an aggressive form of 
&lt;a href="http://kickingcancerass.blogspot.com.br/"&gt;cancer&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Our deepest condolences to his family, which are in our thoughts in this moment of pain and mourning.
The funeral service will be held in &lt;a href="http://www.bosqueesperanca.com.br/"&gt;Belo Horizonte&lt;/a&gt; tomorrow, April 25th, 
at 10am BRT.&lt;/p&gt;
&lt;p&gt;Lucas was a fun, brilliant, confident and hard-working man. We are thankful for the time we had to
work with and learn from him, and are truly saddened by how tragically short that time was. Today the 
world loses an amazing human being, and one of its 
&lt;a href="http://blog.kaggle.com/2016/02/22/profiling-top-kagglers-leustagos-current-7-highest-1/"&gt;most talented data scientists&lt;/a&gt;,
which was respected and cherished by his 
&lt;a href="https://www.kaggle.com/forums/f/15/kaggle-forum/t/20388/data-scientist-hero"&gt;colleagues and peers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rest in peace, Lucas. You will be missed. We will do our best to ensure your work lives on - that the dream
you shared with us will be realized, whatever the odds.&lt;/p&gt;</content><category term="personal"></category></entry><entry><title>Threat Intelligence Indicators are not Signatures</title><link href="https://asieira.github.io/threat-intelligence-indicators-are-not-signatures.html" rel="alternate"></link><published>2016-02-13T02:03:00-02:00</published><updated>2016-02-13T02:03:00-02:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-02-13:/threat-intelligence-indicators-are-not-signatures.html</id><summary type="html">&lt;p&gt;A common misunderstanding that can lead to a lot of pain.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have recently participated in a 
&lt;a href="https://www.blackhat.com/html/webcast/01212016-data-driven-threat-intelligence.html"&gt;Black Hat webcast&lt;/a&gt;
with &lt;a href="https://www.twitter.com/bhaskar_vk"&gt;Bhaskar Karambelkar&lt;/a&gt;, which was sponsored by 
&lt;a href="https://threatconnect.com/"&gt;ThreatConnect&lt;/a&gt;. This was related to the Black Hat 2015 session called 
&lt;a href="https://youtu.be/6JMEKnes-w0?list=PLnKLzDQgx6bPRfNuf3sA2Sy2JDjbcg0P5"&gt;Data-Driven Threat Intelligence: Metrics On Indicator Dissemination And Sharing&lt;/a&gt;,
which I had the pleasure to co-present with my good friend &lt;a href="https://twitter.com/alexcpsec"&gt;Alex Pinto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the end of the webcast, someone asked me a question about a comment I had made on how threat intelligence indicators
have multiple uses, but should not be used as signatures. One of the audience members was a bit baffled by this, and I 
am sure he is not alone. &lt;/p&gt;
&lt;p&gt;So let's focus on automating the use of simple network indicators (IP addresses, domain names and URLs, mostly) that 
most companies will obtain from public or private threat intelligence feeds. Let me show why &lt;em&gt;using them directly as 
signatures&lt;/em&gt;, such as automatically generating IDS signatures and/or SIEM rules to alert or block on direct matches to 
them, is very troublesome. Organizations that do that will, in my experience, be most likely flooded with false 
positives.&lt;/p&gt;
&lt;p&gt;&lt;img alt="False positives, false positives everywhere!" src="https://asieira.github.io/images/indicators-are-not-signatures/false-positives.png"&gt;&lt;/p&gt;
&lt;p&gt;Let me go over a (far from complete) list of reasons why.&lt;/p&gt;
&lt;h2&gt;Affirming the Consequent Fallacy&lt;/h2&gt;
&lt;p&gt;In order to reliably generate an alert based on network traffic, you need to identify a situation in which the 
probability of that traffic being malicious is reasonably high. How high it needs to be depends on your organization's
tolerance to false positives. So you need to satisfy a requirement &lt;code&gt;P(malicious | traffic) &amp;gt; threshold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Threat intelligence network indicators are data points that say &lt;em&gt;we observed a threat actor, malware or tool A generate
traffic with the characteristics M, N and O and to the external locations X, Y and Z&lt;/em&gt;. Notice how &lt;strong&gt;that alone does not 
equal any of the following claims&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most or all of the traffic with characteristics M, N or O to destinations X, Y, Z are caused by A;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A always causes traffic with characteristics M, N or O to destinations X, Y, Z.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do you notice the mismatch? Most people will erroneously equate the claim &lt;em&gt;attackers do X&lt;/em&gt; to &lt;em&gt;I can safely alert when 
X occurs in my environment&lt;/em&gt;. It's related to the 
&lt;a href="https://en.wikipedia.org/wiki/Affirming_the_consequent"&gt;affirming the consequent fallacy&lt;/a&gt;,
but it's even more striking because the feeds are not even making claim 2 above, which would be required for the classic
form of the fallacy.&lt;/p&gt;
&lt;p&gt;To give you an example, you could find a perfectly valid indicator saying a piece of malware uses something like
a public API from Google, Dropbox or anyone else just to verify whether it can connect to the Internet. Or it could
use some publicly available service to identify which public IP address it is reaching the Internet from, and its 
geolocation, in particular in the case of targeted attacks.&lt;/p&gt;
&lt;p&gt;This sort of indicator can still be really useful if you are doing DFIR or hunting, as it allows you to narrow down 
compromised machines on the network, or let you know which forensic data to investigate first. But it should be obvious 
by now that generating an IDS or SIEM alert for every machine on your network that behaves in a similar manner would be 
a really bad idea.&lt;/p&gt;
&lt;h2&gt;What should I match it against?&lt;/h2&gt;
&lt;p&gt;When you get an intelligence feed, it might contain indicators that are indicative of several different kinds of 
malicious behaviors. In particular the paid feeds will contain a mix of human-readable context in the form a report, 
and also the machine-readable indicators associated  with each report. &lt;/p&gt;
&lt;p&gt;The problem is that it can be very hard to automatically determine in which context each technical indicator can be
applied. In the case of IP addresses, for example, very rarely does the machine-readable data allow you to unambigously
determine something as simple as whether it is associated with &lt;em&gt;inbound&lt;/em&gt; traffic, &lt;em&gt;outbound&lt;/em&gt; traffic or both.&lt;/p&gt;
&lt;p&gt;In case you are not familiar with the terminology, the definition of &lt;em&gt;inbound&lt;/em&gt; and &lt;em&gt;outbound&lt;/em&gt; I'm referring to is the 
one used in &lt;a href="https://github.com/mlsecproject/combine"&gt;combine&lt;/a&gt; and &lt;a href="https://github.com/mlsecproject/tiq-test"&gt;tiq-test&lt;/a&gt;. 
Keeping  your organization as the point of reference, &lt;em&gt;inbound&lt;/em&gt; indicators would refer to traffic originating from the 
open Internet towards your organization's public assets: port scanning, credential brute forcing, automated or manual 
exploitation of Internet-facing services, etc. &lt;em&gt;Outbound&lt;/em&gt; indicators, on the other hand, would be associated with 
traffic originating from inside your organization's network towards the open Internet, such as data exfiltration, C&amp;amp;C 
traffic, downloading of malware or client-side exploits.&lt;/p&gt;
&lt;p&gt;So knowing which traffic &lt;em&gt;direction&lt;/em&gt; each indicator applies to would be the most basic way to reduce false positives,
and it is often not available for use on an automated fashion.&lt;/p&gt;
&lt;h2&gt;"Helpful" Feed Providers&lt;/h2&gt;
&lt;p&gt;Imagine an analyst reverses a new malware or RAT sample and identifies that it uses a particular URL to talk back to
its creator. He will of course generate an indicator in the report for that URL. However, sometimes the feed provider
will go one step further and think "but what about people that want to match this in netflow, firewall or DNS logs?", 
and do you the favor of also generating indicators for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The hostname of the URL, so you can match this on DNS;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The IP addresses that hostname resolved to at the time of the analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This creates all sort of problems and piles onto the false positives.&lt;/p&gt;
&lt;p&gt;First, extracting the hostname is not always appropriate. Attackers might control the entire content served under that
hostname (think DGAs, a single compromised web server that attacker fully controls). However, it might also be a portal
with completely independent sub-sites hosted under different paths that share no infrastructure except for a load 
balancer that routes requests appropriately. Or it might be something like a Google Drive or Dropbox link, or a URL
shortener. So considering the entire domain to be compromised / malicious because of a few URLs within it is often
a step too far.&lt;/p&gt;
&lt;p&gt;It's even worse when resolving domain names to IP addresses, even for domains completely dedicated to malicious 
purposes. Firstly, we know that miscreants can and will 
&lt;a href="https://en.wikipedia.org/wiki/Fast_flux"&gt;switch the IP addresses a domain resolves to often&lt;/a&gt;, and the IPs you
receive will most likely be outdated by the time you get to use them. Second, it's not uncommon for malicious domains
to be using a service like &lt;a href="https://www.cloudflare.com/"&gt;CloudFlare&lt;/a&gt;, &lt;a href="https://www.incapsula.com/"&gt;Incapsula&lt;/a&gt; or a 
shared hosting service. So if you resolve the domain, you'll get an IP address that's shared with possibly hundreds of
benign websites. Or it could be temporarily parked at a benign IP address such as 8.8.8.8. Again, knowing that a domain 
is malicious does not necessarily mean that all of the IPs it resolves to are mostly or completely malicious as well.&lt;/p&gt;
&lt;p&gt;Feed providers, take note: having this extra information would be more helpful if it was possible to distinguish the 
&lt;em&gt;principled&lt;/em&gt; indicators from the &lt;em&gt;derived&lt;/em&gt; ones. But alas, this information is often not present in the 
computer-readable indicators.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this article helps people realize that organizations need to put proper processes and/or automation in place to 
overcome the problems identified above if they decide to use threat intelligence indicators for detection. Even though 
threat intelligence indicators are really valuable allies to information security monitoring and DFIR initiatives, they 
are not signatures and should be used with appropriate care.&lt;/p&gt;</content><category term="threat intelligence"></category></entry><entry><title>Test Data to Develop Splunk Content</title><link href="https://asieira.github.io/test-data-to-develop-splunk-content.html" rel="alternate"></link><published>2016-02-02T17:40:00-02:00</published><updated>2016-02-02T17:40:00-02:00</updated><author><name>Alexandre Sieira</name></author><id>tag:asieira.github.io,2016-02-02:/test-data-to-develop-splunk-content.html</id><summary type="html">&lt;p&gt;Using Splunk eventgen to create sample events from different devices.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://splunk.com"&gt;Splunk&lt;/a&gt; is the SIEM platform I have been working the most with recently. It is a joy to work with 
because it has embraced the development paradigm, and organizes standard and user-developed content into apps. And it 
lets you write code in proper languages like Python or Java to process the data in ways that go beyond their own query 
language.&lt;/p&gt;
&lt;p&gt;Which brings me to how it is that you can develop and test an app for security devices and environments you don't 
personally have access to. Actual sample log data is not easy to come by. And even if you do find it some Splunk apps 
expect the log data to be ingested in particular ways (e.g. syslog), and replaying them from a file on disk is not 
always trivial. &lt;/p&gt;
&lt;p&gt;This is a concern both if you are writing a new app that will be used by others, or if you want to ensure that your
internal organization's apps are able to correctly handle log entries that are infrequent or that you might not
have encountered before. For example, the 
&lt;a href="https://docs.splunk.com/Documentation/CIM/latest/User/IntrusionDetection"&gt;Network Intrusion CIM model&lt;/a&gt;
does not specify a finite list of possible values for the &lt;code&gt;action&lt;/code&gt; field. And until you see some test examples you
won't know that the Check Point OPSEC TA field extractions will have the service name instead of the port number in the 
&lt;code&gt;dest_port&lt;/code&gt; field of the 
&lt;a href="https://docs.splunk.com/Documentation/CIM/latest/User/NetworkTraffic"&gt;Network Traffic CIM model&lt;/a&gt;. So you'll need to 
get a representative set of events and find what out values the TAs actually generate if you want to ensure your content 
will adequately survive its first encounter with with real events out there in the wilderness.&lt;/p&gt;
&lt;p&gt;Looking into this for the &lt;a href="https://splunkbase.splunk.com/app/2777/"&gt;Niddel app&lt;/a&gt; I stumbled upon a very useful tool 
called &lt;a href="https://github.com/splunk/eventgen"&gt;eventgen&lt;/a&gt;. Basically what I have found is that most Splunk-developed apps,
and many developed by third parties, are shipped with configurations that allow you to easily generate sample log data 
that you can then use to test your content. &lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/splunk/eventgen/blob/develop/README/Tutorial.md"&gt;eventgen tutorial&lt;/a&gt; is very thorough and the
tool is very well documented. However the documentation is almost exclusively focused on app developers which want to
support event generation in their apps. Very little is said about how to simply use the functionality the app developers
already built-in. So let me try to help fill in the gaps here with the TL;DR version, which I only recommend for
development-only Splunk instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, confirm if the particular app or TA you are interested in has that configuration: go to its directory
under &lt;code&gt;$SPLUNK_HOME/etc/apps&lt;/code&gt; (or download it from &lt;a href="https://splunkbase.splunk.com"&gt;SplunkBase&lt;/a&gt; and check within the 
archive) for a &lt;code&gt;samples&lt;/code&gt; directory and a &lt;code&gt;default/eventgen.conf&lt;/code&gt; file. If it's there, you're in luck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, ensure that the apps or TA for which you want to generate events os configured to share their content globally, 
or the eventgen app (installed later) won't be able to access its sample data and configurations. The simplest way to 
do this is on Splunk Web is to navigate to &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Apps&lt;/code&gt; and click on &lt;code&gt;Permissions&lt;/code&gt; under the &lt;code&gt;Sharing&lt;/code&gt; column
for the app you want events from. Make sure the &lt;code&gt;Sharing for config file-only objects&lt;/code&gt; option is set to &lt;code&gt;All apps&lt;/code&gt;: 
&lt;img alt="Splunk app permissions" src="https://asieira.github.io/images/splunk-test-data/app-permissions.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href="https://github.com/splunk/eventgen/"&gt;eventgen GitHub repository&lt;/a&gt; as a 
&lt;a href="https://github.com/splunk/eventgen/archive/develop.zip"&gt;ZIP file&lt;/a&gt; and install it as a Splunk app in &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; 
&lt;code&gt;Manage Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Install app from file&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new eventgen app does not have a setup page when you go to it under &lt;code&gt;Apps&lt;/code&gt;, just statistics on the generated events.
So the only way I found to enable and disable it is to go to &lt;code&gt;Apps&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Apps&lt;/code&gt; and click on &lt;code&gt;Set Up&lt;/code&gt; on the row of
the eventgen app. Mark and unmark the &lt;code&gt;Enable ./bin/eventgen.py&lt;/code&gt; checkbox to enable/disable event generation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this is done, eventgen will inspect all other installed apps it can access (hence the permissions step above) and
generate fake events for them according to their configurations, usually directly to the &lt;code&gt;main&lt;/code&gt; index. No easy way to
choose which apps to generate events from at this time, unfortunately.&lt;/p&gt;</content><category term="splunk"></category><category term="siem"></category></entry></feed>